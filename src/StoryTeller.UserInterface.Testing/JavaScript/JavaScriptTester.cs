using System;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Xml.Linq;
using FubuCore;
using NUnit.Framework;
using WatiN.Core;

namespace StoryTeller.UserInterface.Testing.JavaScript
{
    [TestFixture, Explicit]
    public class JavaScriptTester
    {
        private IE ie;
        private IEnumerable<string> testFiles;

        [TestFixtureSetUp]
        public void TestFixtureSetUp()
        {
            ie = TestBrowser.GetInternetExplorer();
            testFiles = new JavaScriptTestDefinitions().WriteAllFiles();
        }

        // If a javascript test fails in the build, but NOT when you open the HTML file manually, it is probably an IE issue.
        // Make sure to test manually using IE.

        //[IterativeTest("RunQUnitTests")]
        //public void QUnit(object current)
        //{
        //    ((QUnitTest) current).ShouldPass();
        //}


        public IEnumerable RunQUnitTests()
        {
            //if (TestHelper.IsRunningInteractively())
            //{
            //    yield break;
            //}


            foreach (string page in testFiles)
            {
                Debug.WriteLine(page);

                IEnumerable<QUnitTest> results = GetQUnitTestResults(page);
                if (results.FirstOrDefault() == null)
                {
                    yield return NoTestsFoundFailure(page);
                }
                foreach (QUnitTest result in results)
                {
                    yield return result;
                }
            }
        }

        private static QUnitTest NoTestsFoundFailure(string page)
        {
            return new QUnitTest
            {
                FileName = page,
                Result = "FAIL",
                Message =
                    "No test results found. This probably indicates a javascript error that killed QUnit, or the page was not found. Open the test file in a browser.",
                TestName = "Sanity check"
            };
        }

        public IEnumerable<QUnitTest> GetQUnitTestResults(string testPage)
        {
            TestFixtureSetUp();
            ie.GoTo(string.Format("file:///{0}", Path.GetFullPath(testPage)));
            ie.WaitForComplete(5);
            ie.WaitUntilContainsText("Tests completed in", 2);

            ElementsContainer elementsContainer =
                ie.Elements.Filter(Find.ById("tests")).Cast<ElementsContainer>().FirstOrDefault();
            return grabTestResultsFromWebPage(testPage, elementsContainer);
        }

        public IEnumerable<QUnitTest> grabTestResultsFromWebPage(string testPage, ElementsContainer rootTestList)
        {
            // BEWARE: This logic is tightly coupled to the structure of the HTML generated by the QUnit testrunner
            // Also, WatiN doesn't seem to have a good way to get at the children list items in an ordered list
            if (rootTestList == null) yield break;
            XElement documentRoot = XDocument.Load(new StringReader(makeXHtml(rootTestList.OuterHtml))).Root;
            if (documentRoot == null) yield break;

            foreach (XElement listItem in documentRoot.Elements())
            {
                string testName = listItem.Elements().First(x => x.Name.Is("strong")).Value;
                string resultClass = listItem.Attributes().First(x => x.Name.Is("class")).Value;
                string failedAssert = String.Empty;
                if (resultClass == "fail")
                {
                    XElement specificAssertFailureListItem = listItem.Elements()
                        .First(x => x.Name.Is("ol")).Elements()
                        .First(x => x.Name.Is("li") && x.Attributes().First(a => a.Name.Is("class")).Value == "fail");
                    if (specificAssertFailureListItem != null)
                    {
                        failedAssert = specificAssertFailureListItem.Value;
                    }
                }

                yield return new QUnitTest
                {
                    FileName = testPage,
                    TestName = removeAssertCounts(testName),
                    Result = resultClass,
                    Message = failedAssert
                };
            }
        }

        private static string makeXHtml(string html)
        {
            return html.Replace("class=pass", "class=\"pass\"")
                .Replace("class=fail", "class=\"fail\"")
                .Replace("id=tests", "id=\"tests\"");
        }


        private static string removeAssertCounts(string fullTagText)
        {
            if (fullTagText == null) return String.Empty;
            int parenPosition = fullTagText.IndexOf('(');
            if (parenPosition > 0)
            {
                return fullTagText.Substring(0, parenPosition - 1);
            }
            return fullTagText;
        }

        [Test, Explicit]
        public void open_all_test_files()
        {
            new JavaScriptTestDefinitions().OpenAllTests();
        }

        [Test, Explicit]
        public void run_all_the_tests()
        {
            foreach (QUnitTest test in RunQUnitTests())
            {
                Debug.WriteLine("Test {0}:  {1} ({2})".ToFormat(test.TestName, test.Message, test.Result));
            }
        }
    }

    public class QUnitTest
    {
        public string FileName { get; set; }
        public string TestName { get; set; }
        public string Result { get; set; }
        public string Message { get; set; }

        public override string ToString()
        {
            return string.Format("[{0}] {1}", FileName, TestName);
        }
    }

    public static class QUnitTestHelpers
    {
        public static void ShouldPass(this QUnitTest theTest)
        {
            Assert.That(theTest.Result.Split(' '), Has.Member("pass"), theTest.Message);
        }

        public static bool Is(this XName xname, string name)
        {
            return xname.ToString().Equals(name, StringComparison.OrdinalIgnoreCase);
        }
    }

    public static class TestBrowser
    {
        public static readonly object LOCK_ROOT = new object();
        public static IE _browser;

        public static IE GetInternetExplorer()
        {
            if (_browser == null)
            {
                lock (LOCK_ROOT)
                {
                    if (_browser == null)
                    {
                        IE.Settings.AutoMoveMousePointerToTopLeft = false;

                        _browser = (IE) BrowserFactory.Create(BrowserType.InternetExplorer);
                        _browser.ShowWindow(NativeMethods.WindowShowStyle.Hide);
                    }
                }
            }

            return _browser;
        }
    }

    public static class TestHelper
    {
        private const string TESTDRIVEN_NET_ADDIN = "ProcessInvocation";
        private static bool? _runningInteractively;

        public static bool IsRunningInteractively()
        {
            if (!_runningInteractively.HasValue)
            {
                _runningInteractively = Process.GetCurrentProcess().ProcessName.Equals(TESTDRIVEN_NET_ADDIN,
                                                                                       StringComparison.
                                                                                           OrdinalIgnoreCase);
            }
            return _runningInteractively.Value;
        }
    }
}