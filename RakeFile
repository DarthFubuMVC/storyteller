COMPILE_TARGET = "debug"
require 'albacore'
require "BuildUtils.rb"

BUILD_NUMBER_BASE = "0.9.5"
build_number = BUILD_NUMBER_BASE + ".0"
PRODUCT = "StoryTeller"
COPYRIGHT = 'Released under the Apache 2.0 License by Jeremy D. Miller and Brandon Behrens';
COMMON_ASSEMBLY_INFO = 'source/CommonAssemblyInfo.cs';
CLR_VERSION = "v4.0.30319"

task :default => [:compile, :unit_test]
task :ci_build => [:default, :package]

desc "Update the version information for the build"
assemblyinfo :version do |asm|
  asm_version = BUILD_NUMBER_BASE + ".0"
  
  begin
	gittag = `git describe --long --tags`.chomp 	# looks something like v0.1.0-63-g92228f4
	gitnumberpart = /-(\d+)-/.match(gittag)
	gitnumber = gitnumberpart.nil? ? '0' : gitnumberpart[1]
	commit = (ENV["BUILD_VCS_NUMBER"].nil? ? `git log -1 --pretty=format:%H` : ENV["BUILD_VCS_NUMBER"])
  rescue
	commit = "git unavailable"
	gitnumber = "0"
  end
  build_number = "#{BUILD_NUMBER_BASE}.#{gitnumber}"
  tc_build_number = ENV["BUILD_NUMBER"]
  puts "##teamcity[buildNumber '#{build_number}-#{tc_build_number}']" unless tc_build_number.nil?
  asm.trademark = commit
  asm.product_name = "#{PRODUCT} #{gittag}"
  asm.description = build_number
  asm.version = asm_version
  asm.file_version = build_number
  asm.custom_attributes :AssemblyInformationalVersion => asm_version
  asm.copyright = COPYRIGHT
  asm.output_file = COMMON_ASSEMBLY_INFO
end

task :compile => :version do
  MSBuildRunner.compile :compilemode => COMPILE_TARGET, :solutionfile => 'source/StoryTeller.sln', :clrversion => CLR_VERSION
end

task :unit_test => :compile do
  runner = NUnitRunner.new :compilemode => COMPILE_TARGET
  runner.executeTests ['StoryTeller.Testing']
end


require 'zip/zip'
task :package => [:version]  do
  package_file = "StoryTeller.#{build_number}.zip"
  File.delete package_file if File.exist? package_file
  Zip::ZipFile.open(package_file, Zip::ZipFile::CREATE) do |zip|
	  zip.add "ICSharpCode.AvalonEdit.dll", "source/StoryTellerUI/bin/#{COMPILE_TARGET}/ICSharpCode.AvalonEdit.dll"
	  zip.add "ICSharpCode.Core.dll", "source/StoryTellerUI/bin/#{COMPILE_TARGET}/ICSharpCode.Core.dll"
	  zip.add "ICSharpCode.Core.Presentation.dll", "source/StoryTellerUI/bin/#{COMPILE_TARGET}/ICSharpCode.Core.Presentation.dll"
	  zip.add "ICSharpCode.Core.WinForms.dll", "source/StoryTellerUI/bin/#{COMPILE_TARGET}/ICSharpCode.Core.WinForms.dll"
	  zip.add "ICSharpCode.SharpDevelop.dll", "source/StoryTellerUI/bin/#{COMPILE_TARGET}/ICSharpCode.SharpDevelop.dll"
	  zip.add "ICSharpCode.TextEditor.dll", "source/StoryTellerUI/bin/#{COMPILE_TARGET}/ICSharpCode.TextEditor.dll"
	  zip.add "StoryTeller.UserInterface.dll", "source/StoryTellerUI/bin/#{COMPILE_TARGET}/StoryTeller.UserInterface.dll"
	  zip.add "XmlEditor.dll", "source/StoryTellerUI/bin/#{COMPILE_TARGET}/XmlEditor.dll"
	  zip.add "StoryTeller.dll", "source/StoryTellerUI/bin/#{COMPILE_TARGET}/StoryTeller.dll"
	  zip.add "StoryTellerUI.exe", "source/StoryTellerUI/bin/#{COMPILE_TARGET}/StoryTellerUI.exe"
	  zip.add "StructureMap.dll", "source/StoryTellerUI/bin/#{COMPILE_TARGET}/StructureMap.dll"
	  zip.add "FubuCore.dll", "source/StoryTellerUI/bin/#{COMPILE_TARGET}/FubuCore.dll"
	  zip.add "HtmlTags.dll", "source/StoryTellerUI/bin/#{COMPILE_TARGET}/HtmlTags.dll"
	  zip.add "Newtonsoft.Json.dll", "source/StoryTellerUI/bin/#{COMPILE_TARGET}/Newtonsoft.Json.dll"
	  zip.add "Microsoft.Practices.ServiceLocation.dll", "source/StoryTellerUI/bin/#{COMPILE_TARGET}/Microsoft.Practices.ServiceLocation.dll"
	  zip.add "ShadeTree.dll", "source/StoryTellerUI/bin/#{COMPILE_TARGET}/ShadeTree.dll"
	  zip.add "ShadeTree.Binding.dll", "source/StoryTellerUI/bin/#{COMPILE_TARGET}/ShadeTree.Binding.dll"
	  zip.add "StoryTellerRunner.exe", "source/StoryTellerRunner/bin/#{COMPILE_TARGET}/StoryTellerRunner.exe"
  
  end

end


task :samples do
	sh "source/SampleGenerator/bin/#{COMPILE_TARGET}/SampleGenerator.exe source/Examples docs/samples"
	sh "source/SampleGenerator/bin/#{COMPILE_TARGET}/SampleGenerator.exe source/StoryTeller docs/samples"
	sh "source/SampleGenerator/bin/#{COMPILE_TARGET}/SampleGenerator.exe source/StoryTeller.Testing docs/samples"
	sh "source/SampleGenerator/bin/#{COMPILE_TARGET}/SampleGenerator.exe source/StoryTeller.Samples docs/samples"
end

task :generate_docs do
	ruby "docs/docs.rb"
end

task :docs => [:samples, :generate_docs]
	

task :publish_docs => :docs do
	cp_r 'docs/output/.', '../storyteller-website'
	#sh "c:/git/storyteller-website/git.exe add ."
	#sh 'c:/git/storyteller-website/git.exe commit -a -m "automated push of docs"'
	#sh 'c:/git/storyteller-website/git.exe push origin'
end




