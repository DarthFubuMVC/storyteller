<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ICSharpCode.AvalonEdit</name>
    </assembly>
    <members>
        <member name="T:ICSharpCode.AvalonEdit.Highlighting.HighlightingRule">
            <summary>
            A highlighting rule.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Highlighting.HighlightingRule.Regex">
            <summary>
            Gets/Sets the regular expression for the rule.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Highlighting.HighlightingRule.Color">
            <summary>
            Gets/Sets the highlighting color.
            </summary>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Gui.ITextViewConnect">
            <summary>
            Allows <see cref="T:ICSharpCode.AvalonEdit.Gui.VisualLineElementGenerator"/>s, <see cref="T:ICSharpCode.AvalonEdit.Gui.IVisualLineTransformer"/>s and
            <see cref="T:ICSharpCode.AvalonEdit.Gui.IBackgroundRenderer"/>s to be notified when they are added or removed from a text view.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Gui.ITextViewConnect.AddToTextView(ICSharpCode.AvalonEdit.Gui.TextView)">
            <summary>
            Called when added to a text view.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Gui.ITextViewConnect.RemoveFromTextView(ICSharpCode.AvalonEdit.Gui.TextView)">
            <summary>
            Called when removed from a text view.
            </summary>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Gui.TextAreaDefaultInputHandler">
            <summary>
            Contains the predefined input handlers.
            </summary>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Gui.TextAreaInputHandler">
            <summary>
            Default-implementation of <see cref="T:ICSharpCode.AvalonEdit.Gui.ITextAreaInputHandler"/>.
            </summary>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Gui.ITextAreaInputHandler">
            <summary>
            A set of input bindings and event handlers for the text area.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Gui.ITextAreaInputHandler.Attach">
            <summary>
            Attaches an input handler to the text area.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Gui.ITextAreaInputHandler.Detach">
            <summary>
            Detaches the input handler from the text area.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Gui.ITextAreaInputHandler.TextArea">
            <summary>
            Gets the text area that the input handler belongs to.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Gui.TextAreaInputHandler.#ctor(ICSharpCode.AvalonEdit.TextArea)">
            <summary>
            Creates a new TextAreaInputHandler.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Gui.TextAreaInputHandler.AddBinding(System.Windows.Input.ICommand,System.Windows.Input.ModifierKeys,System.Windows.Input.Key,System.Windows.Input.ExecutedRoutedEventHandler)">
            <summary>
            Adds a command and input binding.
            </summary>
            <param name="command">The command ID.</param>
            <param name="modifiers">The modifiers of the keyboard shortcut.</param>
            <param name="key">The key of the keyboard shortcut.</param>
            <param name="handler">The event handler to run when the command is executed.</param>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Gui.TextAreaInputHandler.Attach">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Gui.TextAreaInputHandler.Detach">
            <inheritdoc/>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Gui.TextAreaInputHandler.TextArea">
            <inheritdoc/>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Gui.TextAreaInputHandler.IsAttached">
            <summary>
            Gets whether the input handler is currently attached to the text area.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Gui.TextAreaInputHandler.CommandBindings">
            <summary>
            Gets the command bindings of this input handler.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Gui.TextAreaInputHandler.InputBindings">
            <summary>
            Gets the input bindings of this input handler.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Gui.TextAreaInputHandler.NestedInputHandlers">
            <summary>
            Gets the collection of nested input handlers. NestedInputHandlers are activated and deactivated
            together with this input handler.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Gui.TextAreaDefaultInputHandler.#ctor(ICSharpCode.AvalonEdit.TextArea)">
            <summary>
            Creates a new TextAreaDefaultInputHandler instance.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Gui.TextAreaDefaultInputHandler.CaretNavigation">
            <summary>
            Gets the caret navigation input handler.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Gui.TextAreaDefaultInputHandler.Editing">
            <summary>
            Gets the editing input handler.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Gui.TextAreaDefaultInputHandler.MouseSelection">
            <summary>
            Gets the mouse selection input handler.
            </summary>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Document.TextSegment">
            <summary>
            A segment that can be put into a SegmentTree.
            </summary>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Document.ISegment">
            <summary>
            An (Offset,Length)-pair.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Document.ISegment.Offset">
            <summary>
            Gets the start offset of the segment.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Document.ISegment.Length">
            <summary>
            Gets the length of the segment.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Document.ISegment.EndOffset">
            <summary>
            Gets the end offset of the segment.
            </summary>
            <remarks>EndOffset = Offset + Length;</remarks>
        </member>
        <member name="F:ICSharpCode.AvalonEdit.Document.TextSegment.color">
            <summary>
            The color of the segment in the red/black tree.
            </summary>
        </member>
        <member name="F:ICSharpCode.AvalonEdit.Document.TextSegment.nodeLength">
            <summary>
            The "length" of the node (distance to previous node)
            </summary>
        </member>
        <member name="F:ICSharpCode.AvalonEdit.Document.TextSegment.totalNodeLength">
            <summary>
            The total "length" of this subtree.
            </summary>
        </member>
        <member name="F:ICSharpCode.AvalonEdit.Document.TextSegment.segmentLength">
            <summary>
            The length of the segment (do not confuse with nodeLength).
            </summary>
        </member>
        <member name="F:ICSharpCode.AvalonEdit.Document.TextSegment.distanceToMaxEnd">
            <summary>
            distanceToMaxEnd = Max(segmentLength,
                                   left.distanceToMaxEnd + left.Offset - Offset,
                                   left.distanceToMaxEnd + right.Offset - Offset)
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.TextSegment.ToString">
            <inheritdoc/>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Document.TextSegment.StartOffset">
            <summary>
            Gets/Sets the start offset of the segment.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Document.TextSegment.EndOffset">
            <summary>
            Gets the end offset of the segment.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Document.TextSegment.Length">
            <summary>
            Gets/Sets the length of the segment.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Document.TextSegment.Successor">
            <summary>
            Gets the inorder successor of the node.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Document.TextSegment.Predecessor">
            <summary>
            Gets the inorder predecessor of the node.
            </summary>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.CodeCompletion.CompletionWindowBase">
            <summary>
            Base class for completion windows. Handles positioning the window at the caret.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.CodeCompletion.CompletionWindowBase.#ctor(ICSharpCode.AvalonEdit.TextArea)">
            <summary>
            Creates a new CompletionWindowBase.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.CodeCompletion.CompletionWindowBase.AttachEvents">
            <summary>
            Attaches events to the text area.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.CodeCompletion.CompletionWindowBase.DetachEvents">
            <summary>
            Detaches events from the text area.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.CodeCompletion.CompletionWindowBase.OnDeactivated(System.EventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.CodeCompletion.CompletionWindowBase.RaiseEventPair(System.Windows.UIElement,System.Windows.RoutedEvent,System.Windows.RoutedEvent,System.Windows.RoutedEventArgs)">
            <summary>
            Raises a tunnel/bubble event pair for a WPF control.
            </summary>
            <param name="target">The WPF control for which the event should be raised.</param>
            <param name="previewEvent">The tunneling event.</param>
            <param name="event">The bubbling event.</param>
            <param name="args">The event args to use.</param>
            <returns>The <see cref="P:System.Windows.RoutedEventArgs.Handled"/> value of the event args.</returns>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.CodeCompletion.CompletionWindowBase.ActiveParentWindow">
            <summary>
            Activates the parent window.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.CodeCompletion.CompletionWindowBase.OnSourceInitialized(System.EventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.CodeCompletion.CompletionWindowBase.OnClosed(System.EventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.CodeCompletion.CompletionWindowBase.OnKeyDown(System.Windows.Input.KeyEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.CodeCompletion.CompletionWindowBase.SetPosition">
            <summary>
            Positions the completion window at the caret position.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.CodeCompletion.CompletionWindowBase.TextArea">
            <summary>
            Gets the parent TextArea.
            </summary>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Highlighting.Xshd.IXshdVisitor">
            <summary>
            A visitor over the XSHD element tree.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Highlighting.Xshd.IXshdVisitor.VisitRuleSet(ICSharpCode.AvalonEdit.Highlighting.Xshd.XshdRuleSet)">
            <summary/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Highlighting.Xshd.IXshdVisitor.VisitColor(ICSharpCode.AvalonEdit.Highlighting.Xshd.XshdColor)">
            <summary/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Highlighting.Xshd.IXshdVisitor.VisitKeywords(ICSharpCode.AvalonEdit.Highlighting.Xshd.XshdKeywords)">
            <summary/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Highlighting.Xshd.IXshdVisitor.VisitSpan(ICSharpCode.AvalonEdit.Highlighting.Xshd.XshdSpan)">
            <summary/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Highlighting.Xshd.IXshdVisitor.VisitImport(ICSharpCode.AvalonEdit.Highlighting.Xshd.XshdImport)">
            <summary/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Highlighting.Xshd.IXshdVisitor.VisitRule(ICSharpCode.AvalonEdit.Highlighting.Xshd.XshdRule)">
            <summary/>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Highlighting.HighlightingRuleSet">
            <summary>
            A highlighting rule set describes a set of spans that are valid at a given code location.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Highlighting.HighlightingRuleSet.#ctor">
            <summary>
            Creates a new RuleSet instance.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Highlighting.HighlightingRuleSet.Spans">
            <summary>
            Gets the list of spans.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Highlighting.HighlightingRuleSet.Rules">
            <summary>
            Gets the list of rules.
            </summary>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Highlighting.HighlightingManager">
            <summary>
            Manages a list of syntax highlighting definitions.
            </summary>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Highlighting.IHighlightingDefinitionReferenceResolver">
            <summary>
            Interface for resolvers that can solve cross-definition references.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Highlighting.IHighlightingDefinitionReferenceResolver.GetDefinition(System.String)">
            <summary>
            Gets the highlighting definition by name, or null if it is not found.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Highlighting.HighlightingManager.GetDefinition(System.String)">
            <summary>
            Gets a highlighting definition by name.
            Returns null if the definition is not found.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Highlighting.HighlightingManager.GetDefinitionByExtension(System.String)">
            <summary>
            Gets a highlighting definition by extension.
            Returns null if the definition is not found.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Highlighting.HighlightingManager.RegisterHighlighting(System.String,System.String[],ICSharpCode.AvalonEdit.Highlighting.IHighlightingDefinition)">
            <summary>
            Registers a highlighting definition.
            </summary>
            <param name="name">The name to register the definition with.</param>
            <param name="extensions">The file extensions to register the definition for.</param>
            <param name="highlighting">The highlighting definition.</param>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Highlighting.HighlightingManager.RegisterHighlighting(System.String,System.String[],System.Func{ICSharpCode.AvalonEdit.Highlighting.IHighlightingDefinition})">
            <summary>
            Registers a highlighting definition.
            </summary>
            <param name="name">The name to register the definition with.</param>
            <param name="extensions">The file extensions to register the definition for.</param>
            <param name="lazyLoadedHighlighting">A function that loads the highlighting definition.</param>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Highlighting.HighlightingManager.HighlightingNames">
            <summary>
            Gets the names of the registered highlightings.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Highlighting.HighlightingManager.Instance">
            <summary>
            Gets the default HighlightingManager instance.
            The default HighlightingManager comes with built-in highlightings.
            </summary>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Gui.HeightTreeNode">
            <summary>
            A node in the text view's height tree.
            </summary>
        </member>
        <member name="F:ICSharpCode.AvalonEdit.Gui.HeightTreeNode.totalCount">
            <summary>
            The number of lines in this node and its child nodes.
            Invariant:
              totalCount = 1 + left.totalCount + right.totalCount
            </summary>
        </member>
        <member name="F:ICSharpCode.AvalonEdit.Gui.HeightTreeNode.totalHeight">
            <summary>
            The total height of this node and its child nodes, excluding directly collapsed nodes.
            Invariant:
              totalHeight = left.IsDirectlyCollapsed ? 0 : left.totalHeight
                          + lineNode.IsDirectlyCollapsed ? 0 : lineNode.Height
                          + right.IsDirectlyCollapsed ? 0 : right.totalHeight
            </summary>
        </member>
        <member name="F:ICSharpCode.AvalonEdit.Gui.HeightTreeNode.collapsedSections">
            <summary>
            List of the sections that hold this node collapsed.
            Invariant 1:
              For each document line in the range described by a CollapsedSection, exactly one ancestor
              contains that CollapsedSection.
            Invariant 2:
              A CollapsedSection is contained either in left+middle or middle+right or just middle.
            Invariant 3:
              Start and end of a CollapsedSection always contain the collapsedSection in their
              documentLine (middle node).
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Gui.HeightTreeNode.Successor">
            <summary>
            Gets the inorder successor of the node.
            </summary>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Gui.FoldingManager">
            <summary>
            Stores a list of foldings for a specific TextView and TextDocument.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Gui.FoldingManager.#ctor(ICSharpCode.AvalonEdit.Gui.TextView,ICSharpCode.AvalonEdit.Document.TextDocument)">
            <summary>
            Creates a new FoldingManager instance.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Gui.FoldingManager.CreateFolding(System.Int32,System.Int32)">
            <summary>
            Creates a folding for the specified text section.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Gui.FoldingManager.GetNextFoldedFoldingStart(System.Int32)">
            <summary>
            Gets the first offset greater or equal to <paramref name="startOffset"/> where a folded folding starts.
            Returns -1 if there are no foldings after <paramref name="startOffset"/>.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Gui.FoldingManager.GetNextFolding(System.Int32)">
            <summary>
            Gets the first folding with a <see cref="P:ICSharpCode.AvalonEdit.Document.TextSegment.StartOffset"/> greater or equal to
            <paramref name="startOffset"/>.
            Returns null if there are no foldings after <paramref name="startOffset"/>.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Gui.FoldingManager.GetFoldingsAt(System.Int32)">
            <summary>
            Gets all foldings that start exactly at <paramref name="startOffset"/>.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Gui.FoldingManager.GetFoldingsContaining(System.Int32)">
            <summary>
            Gets all foldings that contain <param name="offset" />.
            </summary>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Gui.TextViewPosition">
            <summary>
            Represents a text location with a visual column.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Gui.TextViewPosition.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a new TextViewPosition instance.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Gui.TextViewPosition.#ctor(ICSharpCode.AvalonEdit.Document.TextLocation,System.Int32)">
            <summary>
            Creates a new TextViewPosition instance.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Gui.TextViewPosition.#ctor(ICSharpCode.AvalonEdit.Document.TextLocation)">
            <summary>
            Creates a new TextViewPosition instance.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Gui.TextViewPosition.ToString">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Gui.TextViewPosition.op_Implicit(ICSharpCode.AvalonEdit.Gui.TextViewPosition)~ICSharpCode.AvalonEdit.Document.TextLocation">
            <summary>
            Implicit conversion to <see cref="T:ICSharpCode.AvalonEdit.Document.TextLocation"/>.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Gui.TextViewPosition.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Gui.TextViewPosition.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Gui.TextViewPosition.Equals(ICSharpCode.AvalonEdit.Gui.TextViewPosition)">
            <summary>
            Equality test.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Gui.TextViewPosition.op_Equality(ICSharpCode.AvalonEdit.Gui.TextViewPosition,ICSharpCode.AvalonEdit.Gui.TextViewPosition)">
            <summary>
            Equality test.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Gui.TextViewPosition.op_Inequality(ICSharpCode.AvalonEdit.Gui.TextViewPosition,ICSharpCode.AvalonEdit.Gui.TextViewPosition)">
            <summary>
            Inequality test.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Gui.TextViewPosition.Line">
            <summary>
            Gets/Sets the line number.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Gui.TextViewPosition.Column">
            <summary>
            Gets/Sets the (text) column number.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Gui.TextViewPosition.VisualColumn">
            <summary>
            Gets/Sets the visual column number.
            Can be -1 (meaning unknown visual column).
            </summary>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Gui.SelectionMouseHandler">
            <summary>
            Handles selection of text using the mouse.
            </summary>
        </member>
        <member name="F:ICSharpCode.AvalonEdit.Gui.SelectionMouseHandler.SelectionMode.None">
            <summary>
            no selection (no mouse button down)
            </summary>
        </member>
        <member name="F:ICSharpCode.AvalonEdit.Gui.SelectionMouseHandler.SelectionMode.PossibleDragStart">
            <summary>
            left mouse button down on selection, might be normal click
            or might be drag'n'drop
            </summary>
        </member>
        <member name="F:ICSharpCode.AvalonEdit.Gui.SelectionMouseHandler.SelectionMode.Drag">
            <summary>
            dragging text
            </summary>
        </member>
        <member name="F:ICSharpCode.AvalonEdit.Gui.SelectionMouseHandler.SelectionMode.Normal">
            <summary>
            normal selection (click+drag)
            </summary>
        </member>
        <member name="F:ICSharpCode.AvalonEdit.Gui.SelectionMouseHandler.SelectionMode.WholeWord">
            <summary>
            whole-word selection (double click+drag)
            </summary>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Document.NewLineFinder">
            <summary>
            Helper methods for finding new lines.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.NewLineFinder.NextNewLine(System.String,System.Int32)">
            <summary>
            Gets the location of the next new line character, or SimpleSegment.Invalid
            if none is found.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.NewLineFinder.IsNewLine(System.String)">
            <summary>
            Gets whether the specified string is a newline sequence.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.NewLineFinder.NormalizeNewLines(System.String,System.String)">
            <summary>
            Normalizes all new lines in <paramref name="input"/> to be <paramref name="newLine"/>.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.NewLineFinder.GetNewLineFromDocument(ICSharpCode.AvalonEdit.Document.TextDocument,System.Int32)">
            <summary>
            Gets the newline sequence used in the document at the specified line.
            </summary>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Utils.ObserveAddRemoveCollection`1">
            <summary>
            A collection where adding and removing items causes a callback.
            </summary>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Highlighting.Xshd.XshdRule">
            <summary>
            &lt;Rule&gt; element.
            </summary>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Highlighting.Xshd.XshdElement">
            <summary>
            An element in a XSHD rule set.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Highlighting.Xshd.XshdElement.AcceptVisitor(ICSharpCode.AvalonEdit.Highlighting.Xshd.IXshdVisitor)">
            <summary>
            Applies the visitor to this element.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Highlighting.Xshd.XshdElement.LineNumber">
            <summary>
            Gets the line number in the .xshd file.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Highlighting.Xshd.XshdElement.ColumnNumber">
            <summary>
            Gets the column number in the .xshd file.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Highlighting.Xshd.XshdRule.AcceptVisitor(ICSharpCode.AvalonEdit.Highlighting.Xshd.IXshdVisitor)">
            <inheritdoc/>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Highlighting.Xshd.XshdRule.Regex">
            <summary>
            Gets/sets the rule regex.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Highlighting.Xshd.XshdRule.RegexType">
            <summary>
            Gets/sets the rule regex type.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Highlighting.Xshd.XshdRule.ColorReference">
            <summary>
            Gets/sets the color reference.
            </summary>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Highlighting.DocumentHighlighter">
            <summary>
            This class can syntax-highlight a document.
            It automatically manages invalidating the highlighting when the document changes.
            </summary>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Document.ILineTracker">
            <summary>
            Allows for low-level line tracking.
            The methods on this interface are called by the TextDocument's LineManager immediately after the document
            has changed, *while* the DocumentLineTree is updating.
            Thus, the DocumentLineTree may be in an invalid state when these methods are called.
            This interface should only be used to update per-line data structures like the HeightTree.
            Line trackers must not cause any events to be raised during an update to prevent other code from seeing
            the invalid state.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.ILineTracker.BeforeRemoveLine(ICSharpCode.AvalonEdit.Document.DocumentLine)">
            <summary>
            Is called immediately before a document line is removed.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.ILineTracker.SetLineLength(ICSharpCode.AvalonEdit.Document.DocumentLine,System.Int32)">
            <summary>
            Is called immediately before a document line changes length.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.ILineTracker.LineInserted(ICSharpCode.AvalonEdit.Document.DocumentLine,ICSharpCode.AvalonEdit.Document.DocumentLine)">
            <summary>
            Is called immediately after a line was inserted.
            </summary>
            <param name="newLine">The new line</param>
            <param name="insertionPos">The existing line before the new line</param>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.ILineTracker.RebuildDocument">
            <summary>
            Indicates that there were changes to the document that the line tracker was not notified of.
            The document is in a consistent state (but the line trackers aren't), and line trackers should
            throw away their data and rebuild the document.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Highlighting.DocumentHighlighter.#ctor(ICSharpCode.AvalonEdit.Document.TextDocument,ICSharpCode.AvalonEdit.Highlighting.HighlightingRuleSet)">
            <summary>
            Creates a new DocumentHighlighter instance.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Highlighting.DocumentHighlighter.InvalidateHighlighting">
            <summary>
            Invalidates all stored highlighting info.
            When the document changes, the highlighting is invalidated automatically, this method
            needs to be called only when there are changes to the highlighting rule set.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Highlighting.DocumentHighlighter.HighlightLine(ICSharpCode.AvalonEdit.Document.DocumentLine)">
            <summary>
            Highlights the specified document line.
            </summary>
            <param name="line">The line to highlight.</param>
            <returns>A <see cref="T:ICSharpCode.AvalonEdit.Highlighting.HighlightedLine"/> line object that represents the highlighted sections.</returns>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Highlighting.DocumentHighlighter.OnHighlightStateChanged(ICSharpCode.AvalonEdit.Document.DocumentLine,System.Int32)">
            <summary>
            Is called from the highlighting state at the end of the specified line has changed.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Highlighting.DocumentHighlighter.Minimum(System.Text.RegularExpressions.Match[],System.Text.RegularExpressions.Match)">
            <summary>
            Returns the first match from the array or endSpanMatch.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Highlighting.DocumentHighlighter.Document">
            <summary>
            Gets the document that this DocumentHighlighter is highlighting.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.WeakLineTracker.Register(ICSharpCode.AvalonEdit.Document.TextDocument,ICSharpCode.AvalonEdit.Document.ILineTracker)">
            <summary>
            Registers the <paramref name="targetTracker"/> as line tracker for the <paramref name="textDocument"/>.
            A weak reference to the target tracker will be used, and the WeakLineTracker will deregister itself
            when the target tracker is garbage collected.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.WeakLineTracker.Deregister">
            <summary>
            Deregisters the weak line tracker.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.WeakLineTracker.BeforeRemoveLine(ICSharpCode.AvalonEdit.Document.DocumentLine)">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.WeakLineTracker.SetLineLength(ICSharpCode.AvalonEdit.Document.DocumentLine,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.WeakLineTracker.LineInserted(ICSharpCode.AvalonEdit.Document.DocumentLine,ICSharpCode.AvalonEdit.Document.DocumentLine)">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.WeakLineTracker.RebuildDocument">
            <inheritdoc/>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Document.TextLocation">
            <summary>
            A line/column position.
            Text editor lines/columns are counting from one.
            </summary>
        </member>
        <member name="F:ICSharpCode.AvalonEdit.Document.TextLocation.Empty">
            <summary>
            Represents no text location (0, 0).
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.TextLocation.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates a TextLocation instance.
            Warning: the parameters are (line, column).
            Not (column, line) as in ICSharpCode.TextEditor!
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.TextLocation.ToString">
            <summary>
            Gets a string representation for debugging purposes.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.TextLocation.GetHashCode">
            <summary>
            Gets a hash code.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.TextLocation.Equals(System.Object)">
            <summary>
            Equality test.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.TextLocation.Equals(ICSharpCode.AvalonEdit.Document.TextLocation)">
            <summary>
            Equality test.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.TextLocation.op_Equality(ICSharpCode.AvalonEdit.Document.TextLocation,ICSharpCode.AvalonEdit.Document.TextLocation)">
            <summary>
            Equality test.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.TextLocation.op_Inequality(ICSharpCode.AvalonEdit.Document.TextLocation,ICSharpCode.AvalonEdit.Document.TextLocation)">
            <summary>
            Inequality test.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.TextLocation.op_LessThan(ICSharpCode.AvalonEdit.Document.TextLocation,ICSharpCode.AvalonEdit.Document.TextLocation)">
            <summary>
            Compares two text locations.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.TextLocation.op_GreaterThan(ICSharpCode.AvalonEdit.Document.TextLocation,ICSharpCode.AvalonEdit.Document.TextLocation)">
            <summary>
            Compares two text locations.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.TextLocation.op_LessThanOrEqual(ICSharpCode.AvalonEdit.Document.TextLocation,ICSharpCode.AvalonEdit.Document.TextLocation)">
            <summary>
            Compares two text locations.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.TextLocation.op_GreaterThanOrEqual(ICSharpCode.AvalonEdit.Document.TextLocation,ICSharpCode.AvalonEdit.Document.TextLocation)">
            <summary>
            Compares two text locations.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.TextLocation.CompareTo(ICSharpCode.AvalonEdit.Document.TextLocation)">
            <summary>
            Compares two text locations.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Document.TextLocation.Line">
            <summary>
            Gets the line number.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Document.TextLocation.Column">
            <summary>
            Gets the column number.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Document.TextLocation.IsEmpty">
            <summary>
            Gets whether the TextLocation instance is empty.
            </summary>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Document.SimpleSegment">
            <summary>
            Represents a simple segment (Offset,Length pair) that is not automatically updated
            on document changes.
            </summary>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Document.AnchorSegment">
            <summary>
            A segment using text anchors as start and end positions.
            </summary>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Utils.CallbackOnDispose">
            <summary>
            Invokes an action when it is disposed.
            </summary>
            <remarks>
            This class ensures the callback is invoked at most once,
            even when Dispose is called on multiple theadeds.
            </remarks>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Highlighting.Xshd.XshdColor">
            <summary>
            A color in an Xshd file.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Highlighting.Xshd.XshdColor.AcceptVisitor(ICSharpCode.AvalonEdit.Highlighting.Xshd.IXshdVisitor)">
            <inheritdoc/>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Highlighting.Xshd.XshdColor.Name">
            <summary>
            Gets/sets the name.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Highlighting.Xshd.XshdColor.Foreground">
            <summary>
            Gets/sets the foreground brush.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Highlighting.Xshd.XshdColor.FontWeight">
            <summary>
            Gets/sets the font weight.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Highlighting.Xshd.XshdColor.FontStyle">
            <summary>
            Gets/sets the font style.
            </summary>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Highlighting.HighlightingSpan">
            <summary>
            A highlighting span is a region with start+end expression that has a different RuleSet inside
            and colors the region.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Highlighting.HighlightingSpan.StartExpression">
            <summary>
            Gets/Sets the start expression.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Highlighting.HighlightingSpan.EndExpression">
            <summary>
            Gets/Sets the end expression.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Highlighting.HighlightingSpan.RuleSet">
            <summary>
            Gets/Sets the rule set that applies inside this span.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Highlighting.HighlightingSpan.StartColor">
            <summary>
            Gets the color used for the text matching the start expression.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Highlighting.HighlightingSpan.SpanColor">
            <summary>
            Gets the color used for the text between start and end.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Highlighting.HighlightingSpan.EndColor">
            <summary>
            Gets the color used for the text matching the end expression.
            </summary>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Gui.NewLineElementGenerator">
            <summary>
            Elements generator that displays "¶" at the end of lines.
            </summary>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Gui.VisualLineElementGenerator">
            <summary>
            Abstract base class for generators that produce new visual line elements.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Gui.VisualLineElementGenerator.StartGeneration(ICSharpCode.AvalonEdit.Gui.ITextRunConstructionContext)">
            <summary>
            Initializes the generator for the <see cref="T:ICSharpCode.AvalonEdit.Gui.ITextRunConstructionContext"/>
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Gui.VisualLineElementGenerator.FinishGeneration">
            <summary>
            De-initializes the generator.
            </summary>
        </member>
        <member name="F:ICSharpCode.AvalonEdit.Gui.VisualLineElementGenerator.cachedInterest">
            <summary>
            Should only be used by VisualLine.ConstructVisualElements.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Gui.VisualLineElementGenerator.GetFirstInterestedOffset(System.Int32)">
            <summary>
            Gets the first offset >= startOffset where the generator wants to construct an element.
            Return -1 to signal no interest.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Gui.VisualLineElementGenerator.ConstructElement(System.Int32)">
            <summary>
            Constructs an element at the specified offset.
            May return null if no element should be constructed.
            </summary>
            <remarks>
            Avoid signalling interest and then building no element by returning null - doing so
            causes the generated <see cref="T:ICSharpCode.AvalonEdit.Gui.VisualLineText"/> elements to be unnecessarily split
            at the position where you signalled interest.
            </remarks>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Gui.VisualLineElementGenerator.CurrentContext">
            <summary>
            Gets the text run construction context.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Gui.NewLineElementGenerator.GetFirstInterestedOffset(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Gui.NewLineElementGenerator.ConstructElement(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Gui.FormattedTextElement">
            <summary>
            Formatted text (not normal document text).
            This is used as base class for various VisualLineElements that are displayed using a
            FormattedText, for example newline markers or collapsed folding sections.
            </summary>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Gui.VisualLineElement">
            <summary>
            Represents a visual element in the document.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Gui.VisualLineElement.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates a new VisualLineElement.
            </summary>
            <param name="visualLength">The length of the element in VisualLine coordinates. Must be positive.</param>
            <param name="documentLength">The length of the element in the document. Must be non-negative.</param>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Gui.VisualLineElement.CreateTextRun(System.Int32,ICSharpCode.AvalonEdit.Gui.ITextRunConstructionContext)">
            <summary>
            Creates the TextRun for this line element.
            </summary>
            <param name="startVisualColumn">
            The visual column from which the run should be constructed.
            Normally the same value as the <see cref="P:ICSharpCode.AvalonEdit.Gui.VisualLineElement.VisualColumn"/> property is used to construct the full run;
            but when word-wrapping is active, partial runs might be created.
            </param>
            <param name="context">
            Context object that contains information relevant for text run creation.
            </param>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Gui.VisualLineElement.Split(System.Int32,System.Collections.Generic.IList{ICSharpCode.AvalonEdit.Gui.VisualLineElement},System.Int32)">
            <summary>
            Splits the element.
            </summary>
            <param name="splitVisualColumn">Position inside this element at which it should be broken</param>
            <param name="elements">The collection of line elements</param>
            <param name="elementIndex">The index at which this element is in the elements list.</param>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Gui.VisualLineElement.SplitHelper(ICSharpCode.AvalonEdit.Gui.VisualLineElement,ICSharpCode.AvalonEdit.Gui.VisualLineElement,System.Int32,System.Int32)">
            <summary>
            Helper method for splitting this line element into two, correctly updating the
            <see cref="P:ICSharpCode.AvalonEdit.Gui.VisualLineElement.VisualLength"/>, <see cref="P:ICSharpCode.AvalonEdit.Gui.VisualLineElement.DocumentLength"/>, <see cref="P:ICSharpCode.AvalonEdit.Gui.VisualLineElement.VisualColumn"/>
            and <see cref="P:ICSharpCode.AvalonEdit.Gui.VisualLineElement.RelativeTextOffset"/> properties.
            </summary>
            <param name="firstPart">The element before the split position.</param>
            <param name="secondPart">The element after the split position.</param>
            <param name="splitVisualColumn">The split position as visual column.</param>
            <param name="splitRelativeTextOffset">The split position as text offset.</param>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Gui.VisualLineElement.GetVisualColumn(System.Int32)">
            <summary>
            Gets the visual column of a text location inside this element.
            The text offset is given relative to the visual line start.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Gui.VisualLineElement.GetRelativeOffset(System.Int32)">
            <summary>
            Gets the text offset of a visual column inside this element.
            </summary>
            <returns>A text offset relative to the visual line start.</returns>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Gui.VisualLineElement.GetNextCaretPosition(System.Int32,System.Boolean,ICSharpCode.AvalonEdit.Gui.CaretPositioningMode)">
            <summary>
            Gets the next caret position inside this element.
            </summary>
            <param name="visualColumn">The visual column from which the search should be started.</param>
            <param name="backwards">Whether to search backwards (false=forwards,true=backwards).</param>
            <param name="mode">Whether to stop only at word borders.</param>
            <returns>The visual column of the next caret position, or -1 if there is no next caret position.</returns>
            <remarks>
            In the space between two line elements, it is sufficient that one of them contains a caret position;
            though in many cases, both of them contain one.
            </remarks>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Gui.VisualLineElement.OnQueryCursor(System.Windows.Input.QueryCursorEventArgs)">
            <summary>
            Queries the cursor over the visual line element.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Gui.VisualLineElement.OnMouseDown(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Allows the visual line element to handle a mouse event.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Gui.VisualLineElement.OnMouseUp(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Allows the visual line element to handle a mouse event.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Gui.VisualLineElement.VisualLength">
            <summary>
            Gets the length of this element in visual columns.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Gui.VisualLineElement.DocumentLength">
            <summary>
            Gets the length of this element in the text document.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Gui.VisualLineElement.VisualColumn">
            <summary>
            Gets the visual column where this element starts.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Gui.VisualLineElement.RelativeTextOffset">
            <summary>
            Gets the text offset where this element starts, relative to the start text offset of the visual line.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Gui.VisualLineElement.TextRunProperties">
            <summary>
            Gets the text run properties.
            A unique <see cref="T:ICSharpCode.AvalonEdit.Gui.VisualLineElementTextRunProperties"/> instance is used for each
            <see cref="T:ICSharpCode.AvalonEdit.Gui.VisualLineElement"/>; colorizing code may assume that modifying the
            <see cref="T:ICSharpCode.AvalonEdit.Gui.VisualLineElementTextRunProperties"/> will affect only this
            <see cref="T:ICSharpCode.AvalonEdit.Gui.VisualLineElement"/>.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Gui.VisualLineElement.CanSplit">
            <summary>
            Gets if this VisualLineElement can be split.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Gui.VisualLineElement.HandlesLineBorders">
            <summary>
            Gets whether the <see cref="M:ICSharpCode.AvalonEdit.Gui.VisualLineElement.GetNextCaretPosition(System.Int32,System.Boolean,ICSharpCode.AvalonEdit.Gui.CaretPositioningMode)"/> implementation handles line borders.
            If this property returns false, the caller of GetNextCaretPosition should handle the line
            borders (i.e. place caret stops at the start and end of the line).
            This property has an effect only for VisualLineElements that are at the start or end of a
            <see cref="T:ICSharpCode.AvalonEdit.Gui.VisualLine"/>.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Gui.FormattedTextElement.#ctor(System.Windows.Media.FormattedText,System.Int32)">
            <summary>
            Creates a new FormattedTextElement that displays the specified text
            and occupies the specified length in the document.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Gui.FormattedTextElement.CreateTextRun(System.Int32,ICSharpCode.AvalonEdit.Gui.ITextRunConstructionContext)">
            <inheritdoc/>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Gui.FormattedTextElement.Text">
            <summary>
            Gets the formatted text.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Gui.FormattedTextElement.BreakBefore">
            <summary>
            Gets/sets the line break condition before the element.
            The default is 'BreakPossible'.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Gui.FormattedTextElement.BreakAfter">
            <summary>
            Gets/sets the line break condition after the element.
            The default is 'BreakPossible'.
            </summary>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Gui.VisualLineElementTextRunProperties">
            <summary>
            <see cref="T:System.Windows.Media.TextFormatting.TextRunProperties"/> implementation that allows changing the properties.
            A <see cref="T:ICSharpCode.AvalonEdit.Gui.VisualLineElementTextRunProperties"/> instance usually is assigned to a single
            <see cref="T:ICSharpCode.AvalonEdit.Gui.VisualLineElement"/>.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Gui.VisualLineElementTextRunProperties.#ctor(System.Windows.Media.TextFormatting.TextRunProperties)">
            <summary>
            Creates a new VisualLineElementTextRunProperties instance that copies its values
            from the specified <paramref name="textRunProperties"/>.
            For the <see cref="P:ICSharpCode.AvalonEdit.Gui.VisualLineElementTextRunProperties.TextDecorations"/> and <see cref="P:ICSharpCode.AvalonEdit.Gui.VisualLineElementTextRunProperties.TextEffects"/> collections, deep copies
            are created if those collections are not frozen.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Gui.VisualLineElementTextRunProperties.SetBackgroundBrush(System.Windows.Media.Brush)">
            <summary>
            Sets the <see cref="P:ICSharpCode.AvalonEdit.Gui.VisualLineElementTextRunProperties.BackgroundBrush"/>.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Gui.VisualLineElementTextRunProperties.SetBaselineAlignment(System.Windows.BaselineAlignment)">
            <summary>
            Sets the <see cref="P:ICSharpCode.AvalonEdit.Gui.VisualLineElementTextRunProperties.BaselineAlignment"/>.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Gui.VisualLineElementTextRunProperties.SetCultureInfo(System.Globalization.CultureInfo)">
            <summary>
            Sets the <see cref="P:ICSharpCode.AvalonEdit.Gui.VisualLineElementTextRunProperties.CultureInfo"/>.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Gui.VisualLineElementTextRunProperties.SetFontHintingEmSize(System.Double)">
            <summary>
            Sets the <see cref="P:ICSharpCode.AvalonEdit.Gui.VisualLineElementTextRunProperties.FontHintingEmSize"/>.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Gui.VisualLineElementTextRunProperties.SetFontRenderingEmSize(System.Double)">
            <summary>
            Sets the <see cref="P:ICSharpCode.AvalonEdit.Gui.VisualLineElementTextRunProperties.FontRenderingEmSize"/>.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Gui.VisualLineElementTextRunProperties.SetForegroundBrush(System.Windows.Media.Brush)">
            <summary>
            Sets the <see cref="P:ICSharpCode.AvalonEdit.Gui.VisualLineElementTextRunProperties.ForegroundBrush"/>.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Gui.VisualLineElementTextRunProperties.SetTypeface(System.Windows.Media.Typeface)">
            <summary>
            Sets the <see cref="P:ICSharpCode.AvalonEdit.Gui.VisualLineElementTextRunProperties.Typeface"/>.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Gui.VisualLineElementTextRunProperties.SetTextDecorations(System.Windows.TextDecorationCollection)">
            <summary>
            Sets the <see cref="P:ICSharpCode.AvalonEdit.Gui.VisualLineElementTextRunProperties.TextDecorations"/>.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Gui.VisualLineElementTextRunProperties.SetTextEffects(System.Windows.Media.TextEffectCollection)">
            <summary>
            Sets the <see cref="P:ICSharpCode.AvalonEdit.Gui.VisualLineElementTextRunProperties.TextEffects"/>.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Gui.VisualLineElementTextRunProperties.BackgroundBrush">
            <inheritdoc/>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Gui.VisualLineElementTextRunProperties.BaselineAlignment">
            <inheritdoc/>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Gui.VisualLineElementTextRunProperties.CultureInfo">
            <inheritdoc/>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Gui.VisualLineElementTextRunProperties.FontHintingEmSize">
            <inheritdoc/>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Gui.VisualLineElementTextRunProperties.FontRenderingEmSize">
            <inheritdoc/>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Gui.VisualLineElementTextRunProperties.ForegroundBrush">
            <inheritdoc/>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Gui.VisualLineElementTextRunProperties.Typeface">
            <inheritdoc/>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Gui.VisualLineElementTextRunProperties.TextDecorations">
            <summary>
            Gets the text decorations. The value may be null, a frozen <see cref="T:System.Windows.TextDecorationCollection"/>
            or an unfrozen <see cref="T:System.Windows.TextDecorationCollection"/>.
            If the value is an unfrozen <see cref="T:System.Windows.TextDecorationCollection"/>, you may assume that the
            collection instance is only used for this <see cref="T:System.Windows.Media.TextFormatting.TextRunProperties"/> instance and it is safe
            to add <see cref="T:System.Windows.TextDecoration"/>s.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Gui.VisualLineElementTextRunProperties.TextEffects">
            <summary>
            Gets the text effects. The value may be null, a frozen <see cref="T:System.Windows.Media.TextEffectCollection"/>
            or an unfrozen <see cref="T:System.Windows.Media.TextEffectCollection"/>.
            If the value is an unfrozen <see cref="T:System.Windows.Media.TextEffectCollection"/>, you may assume that the
            collection instance is only used for this <see cref="T:System.Windows.Media.TextFormatting.TextRunProperties"/> instance and it is safe
            to add <see cref="T:System.Windows.Media.TextEffect"/>s.
            </summary>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Gui.CollapsedLineSection">
            <summary>
            Represents a collapsed line section.
            Use the Uncollapse() method to uncollapse the section.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Gui.CollapsedLineSection.Uncollapse">
            <summary>
            Uncollapses the section.
            This causes the Start and End properties to be set to null!
            Runtime: O(log(n))
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The section is already uncollapsed, or the text containing the section was deleted.
            </exception>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Gui.CollapsedLineSection.ToString">
            <summary>
            Gets a string representation of the collapsed section.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Gui.CollapsedLineSection.IsCollapsed">
            <summary>
            Gets if the document line is collapsed.
            This property initially is true and turns to false when uncollapsing the section.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Gui.CollapsedLineSection.Start">
            <summary>
            Gets the start line of the section.
            When the section is uncollapsed or the text containing it is deleted,
            this property returns null.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Gui.CollapsedLineSection.End">
            <summary>
            Gets the end line of the section.
            When the section is uncollapsed or the text containing it is deleted,
            this property returns null.
            </summary>
        </member>
        <member name="E:ICSharpCode.AvalonEdit.Gui.CollapsedLineSection.PropertyChanged">
            <summary>
            Is raised when of the properties Start,End,IsCollapsed changes.
            </summary>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Document.TextAnchorNode">
            <summary>
            A TextAnchorNode is placed in the TextAnchorTree.
            It describes a section of text with a text anchor at the end of the section.
            A weak reference is used to refer to the TextAnchor.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Document.TextAnchorNode.Successor">
            <summary>
            Gets the inorder successor of the node.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Document.TextAnchorNode.Predecessor">
            <summary>
            Gets the inorder predecessor of the node.
            </summary>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Utils.HtmlClipboard">
            <summary>
            Allows copying HTML text to the clipboard.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Utils.HtmlClipboard.BuildHeader(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Builds a header for the CF_HTML clipboard format.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Utils.HtmlClipboard.SetHtml(System.Windows.DataObject,System.String)">
            <summary>
            Sets the TextDataFormat.Html on the data object to the specified html fragment.
            This helper methods takes care of creating the necessary CF_HTML header.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Utils.HtmlClipboard.CreateHtmlFragment(ICSharpCode.AvalonEdit.Document.TextDocument,ICSharpCode.AvalonEdit.Highlighting.DocumentHighlighter,ICSharpCode.AvalonEdit.Document.ISegment,ICSharpCode.AvalonEdit.Utils.HtmlOptions)">
            <summary>
            Creates a HTML fragment from a part of a document.
            </summary>
            <param name="document">The document to create HTML from.</param>
            <param name="highlighter">The highlighter used to highlight the document.</param>
            <param name="segment">The part of the document to create HTML for. You can pass null to create HTML for the whole document.</param>
            <param name="options">The options for the HTML creation.</param>
            <returns>HTML code for the document part.</returns>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Utils.HtmlClipboard.CreateHtmlFragmentForSelection(ICSharpCode.AvalonEdit.TextArea,ICSharpCode.AvalonEdit.Utils.HtmlOptions)">
            <summary>
            Creates a HTML fragment for the selected part of the document.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Utils.HtmlClipboard.EscapeHtml(System.Text.StringBuilder,System.String,ICSharpCode.AvalonEdit.Utils.HtmlOptions)">
            <summary>
            Escapes text and writes the result to the StringBuilder.
            </summary>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Utils.HtmlOptions">
            <summary>
            Holds options for converting text to HTML.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Utils.HtmlOptions.#ctor">
            <summary>
            Creates a default HtmlOptions instance.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Utils.HtmlOptions.#ctor(ICSharpCode.AvalonEdit.TextEditorOptions)">
            <summary>
            Creates a new HtmlOptions instance that copies applicable options from the <see cref="T:ICSharpCode.AvalonEdit.TextEditorOptions"/>.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Utils.HtmlOptions.TabSize">
            <summary>
            The amount of spaces a tab gets converted to.
            </summary>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Utils.CompressingTreeList`1">
            <summary>
            A IList{T} implementation that has efficient insertion and removal (in O(lg n) time)
            and that saves memory by allocating only one node when a value is repeated in adjacent indices.
            Based on this "compression", it also supports efficient InsertRange/SetRange/RemoveRange operations.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Utils.CompressingTreeList`1.#ctor(System.Func{`0,`0,System.Boolean})">
            <summary>
            Creates a new CompressingTreeList instance.
            </summary>
            <param name="comparisonFunc">A function that checks two values for equality. If this
            function returns true, a single node may be used to store the two values.</param>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Utils.CompressingTreeList`1.InsertRange(System.Int32,System.Int32,`0)">
            <summary>
            Inserts <paramref name="item"/> <paramref name="count"/> times at position
            <paramref name="index"/>.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Utils.CompressingTreeList`1.RemoveRange(System.Int32,System.Int32)">
            <summary>
            Removes <paramref name="count"/> items starting at position
            <paramref name="index"/>.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Utils.CompressingTreeList`1.SetRange(System.Int32,System.Int32,`0)">
            <summary>
            Sets <paramref name="count"/> indices starting at <paramref name="index"/> to
            <paramref name="item"/>
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Utils.CompressingTreeList`1.IndexOf(`0)">
            <summary>
            Gets the index of the specified <paramref name="item"/>.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Utils.CompressingTreeList`1.Insert(System.Int32,`0)">
            <summary>
            Inserts the specified <paramref name="item"/> at <paramref name="index"/>
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Utils.CompressingTreeList`1.RemoveAt(System.Int32)">
            <summary>
            Removes one item at <paramref name="index"/>
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Utils.CompressingTreeList`1.Add(`0)">
            <summary>
            Adds the specified <paramref name="item"/> to the end of the list.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Utils.CompressingTreeList`1.Clear">
            <summary>
            Removes all items from this list.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Utils.CompressingTreeList`1.Contains(`0)">
            <summary>
            Gets whether this list contains the specified item.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Utils.CompressingTreeList`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies all items in this list to the specified array.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Utils.CompressingTreeList`1.Remove(`0)">
            <summary>
            Removes the specified item from this list.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Utils.CompressingTreeList`1.GetEnumerator">
            <summary>
            Gets an enumerator for this list.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Utils.CompressingTreeList`1.Item(System.Int32)">
            <summary>
            Gets or sets an item by index.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Utils.CompressingTreeList`1.Count">
            <summary>
            Gets the number of items in the list.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Utils.CompressingTreeList`1.Node.Predecessor">
            <summary>
            Gets the inorder predecessor of the node.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Utils.CompressingTreeList`1.Node.Successor">
            <summary>
            Gets the inorder successor of the node.
            </summary>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Highlighting.Xshd.XshdRuleSet">
            <summary>
            A rule set in a XSHD file.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Highlighting.Xshd.XshdRuleSet.AcceptElements(ICSharpCode.AvalonEdit.Highlighting.Xshd.IXshdVisitor)">
            <summary>
            Applies the visitor to all elements.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Highlighting.Xshd.XshdRuleSet.AcceptVisitor(ICSharpCode.AvalonEdit.Highlighting.Xshd.IXshdVisitor)">
            <inheritdoc/>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Highlighting.Xshd.XshdRuleSet.Name">
            <summary>
            Gets/Sets the name of the rule set.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Highlighting.Xshd.XshdRuleSet.IgnoreCase">
            <summary>
            Gets/sets whether the case is ignored in expressions inside this rule set.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Highlighting.Xshd.XshdRuleSet.Elements">
            <summary>
            Gets the collection of elements.
            </summary>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Highlighting.Xshd.HighlightingLoader">
            <summary>
            Static class with helper methods to load XSHD highlighting files.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Highlighting.Xshd.HighlightingLoader.LoadXshd(System.Xml.XmlReader)">
            <summary>
            Lodas a syntax definition from the xml reader.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Highlighting.Xshd.HighlightingLoader.Load(ICSharpCode.AvalonEdit.Highlighting.Xshd.XshdSyntaxDefinition,ICSharpCode.AvalonEdit.Highlighting.IHighlightingDefinitionReferenceResolver)">
            <summary>
            Creates a highlighting definition from the XSHD file.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Highlighting.Xshd.HighlightingLoader.Load(System.Xml.XmlReader,ICSharpCode.AvalonEdit.Highlighting.IHighlightingDefinitionReferenceResolver)">
            <summary>
            Creates a highlighting definition from the XSHD file.
            </summary>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Highlighting.IHighlightingDefinition">
            <summary>
            A highlighting definition.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Highlighting.IHighlightingDefinition.GetNamedRuleSet(System.String)">
            <summary>
            Gets a rule set by name.
            </summary>
            <returns>The rule set, or null if it is not found.</returns>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Highlighting.IHighlightingDefinition.GetNamedColor(System.String)">
            <summary>
            Gets a named highlighting color.
            </summary>
            <returns>The highlighting color, or null if it is not found.</returns>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Highlighting.IHighlightingDefinition.Name">
            <summary>
            Gets the name of the highlighting definition.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Highlighting.IHighlightingDefinition.MainRuleSet">
            <summary>
            Gets the main rule set.
            </summary>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Gui.BackgroundGeometryBuilder">
            <summary>
            Helper for creating a PathGeometry.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Gui.BackgroundGeometryBuilder.#ctor">
            <summary>
            Creates a new BackgroundGeometryBuilder instance.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Gui.BackgroundGeometryBuilder.AddSegments(ICSharpCode.AvalonEdit.Gui.TextView,System.Collections.Generic.IEnumerable{ICSharpCode.AvalonEdit.Document.ISegment})">
            <summary>
            Adds the specified segments to the geometry.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Gui.BackgroundGeometryBuilder.AddRectangle(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Adds a rectangle to the geometry.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Gui.BackgroundGeometryBuilder.CreateGeometry">
            <summary>
            Creates the geometry.
            Returns null when the geometry is empty!
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Gui.BackgroundGeometryBuilder.CornerRadius">
            <summary>
            Gets/sets the radius of the rounded corners.
            </summary>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Document.TextAnchor">
            <summary>
            The TextAnchor class references a text location - a position between two characters.
            It automatically updates its offset when text is inserted/removed in front of the anchor.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.TextAnchor.ToString">
            <inheritdoc/>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Document.TextAnchor.Document">
            <summary>
            Gets the document owning the anchor.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Document.TextAnchor.MovementType">
            <summary>
            Controls how the anchor moves.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Document.TextAnchor.SurviveDeletion">
            <summary>
            Specifies whether the anchor survives deletion of the text containing it.
            <c>false</c>: The anchor is deleted when the a selection that includes the anchor is deleted.
            <c>true</c>: The anchor is not deleted.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Document.TextAnchor.IsDeleted">
            <summary>
            Gets whether the anchor was deleted.
            </summary>
        </member>
        <member name="E:ICSharpCode.AvalonEdit.Document.TextAnchor.Deleted">
            <summary>
            Occurs after the anchor was deleted.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Document.TextAnchor.Offset">
            <summary>
            Gets the offset of the text anchor.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown when trying to get the Offset from a deleted anchor.</exception>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Document.TextAnchor.Line">
            <summary>
            Gets the line number of the anchor.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Document.TextAnchor.Column">
            <summary>
            Gets the column number of this anchor.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Document.TextAnchor.Location">
            <summary>
            Gets the text location of this anchor.
            </summary>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Document.AnchorMovementType">
            <summary>
            Defines how a text anchor moves.
            </summary>
        </member>
        <member name="F:ICSharpCode.AvalonEdit.Document.AnchorMovementType.BeforeInsertion">
            <summary>
            Behaves like a start marker - when text is inserted at the anchor position, the anchor will stay
            before the inserted text.
            </summary>
        </member>
        <member name="F:ICSharpCode.AvalonEdit.Document.AnchorMovementType.AfterInsertion">
            <summary>
            Behave like an end marker - when text is insered at the anchor position, the anchor will move
            after the inserted text.
            </summary>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Highlighting.Xshd.XshdRegexType">
            <summary>
            Specifies the type of the regex.
            </summary>
        </member>
        <member name="F:ICSharpCode.AvalonEdit.Highlighting.Xshd.XshdRegexType.Default">
            <summary>
            Normal regex. Used when the regex was specified as attribute.
            </summary>
        </member>
        <member name="F:ICSharpCode.AvalonEdit.Highlighting.Xshd.XshdRegexType.IgnorePatternWhitespace">
            <summary>
            Ignore pattern whitespace / allow regex comments. Used when the regex was specified as text element.
            </summary>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Highlighting.Xshd.XshdSpan">
            <summary>
            &lt;Span&gt; element.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Highlighting.Xshd.XshdSpan.AcceptVisitor(ICSharpCode.AvalonEdit.Highlighting.Xshd.IXshdVisitor)">
            <inheritdoc/>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Highlighting.Xshd.XshdSpan.BeginRegex">
            <summary>
            Gets/sets the begin regex.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Highlighting.Xshd.XshdSpan.BeginRegexType">
            <summary>
            Gets/sets the begin regex type.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Highlighting.Xshd.XshdSpan.EndRegex">
            <summary>
            Gets/sets the end regex.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Highlighting.Xshd.XshdSpan.EndRegexType">
            <summary>
            Gets/sets the end regex type.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Highlighting.Xshd.XshdSpan.Multiline">
            <summary>
            Gets/sets whether the span is multiline.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Highlighting.Xshd.XshdSpan.RuleSetReference">
            <summary>
            Gets/sets the rule set reference.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Highlighting.Xshd.XshdSpan.SpanColorReference">
            <summary>
            Gets/sets the span color.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Highlighting.Xshd.XshdSpan.BeginColorReference">
            <summary>
            Gets/sets the span begin color.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Highlighting.Xshd.XshdSpan.EndColorReference">
            <summary>
            Gets/sets the span end color.
            </summary>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Highlighting.Xshd.XshdImport">
            <summary>
            &lt;Import&gt; element.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Highlighting.Xshd.XshdImport.AcceptVisitor(ICSharpCode.AvalonEdit.Highlighting.Xshd.IXshdVisitor)">
            <inheritdoc/>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Highlighting.Xshd.XshdImport.RuleSetReference">
            <summary>
            Gets/sets the referenced rule set.
            </summary>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Gui.VisualYPosition">
            <summary>
            An enum that specifies the possible Y positions that can be returned by VisualLine.GetVisualPosition.
            </summary>
        </member>
        <member name="F:ICSharpCode.AvalonEdit.Gui.VisualYPosition.LineTop">
            <summary>
            Returns the top of the TextLine.
            </summary>
        </member>
        <member name="F:ICSharpCode.AvalonEdit.Gui.VisualYPosition.TextTop">
            <summary>
            Returns the top of the text. If the line contains inline UI elements larger than the text, TextTop
            will be below LineTop.
            </summary>
        </member>
        <member name="F:ICSharpCode.AvalonEdit.Gui.VisualYPosition.LineBottom">
            <summary>
            Returns the bottom of the TextLine. This is the same as the bottom of the text (the text is always
            aligned at the bottom border).
            </summary>
        </member>
        <member name="F:ICSharpCode.AvalonEdit.Gui.VisualYPosition.LineMiddle">
            <summary>
            The middle between LineTop and LineBottom.
            </summary>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Document.TextAnchorTree">
            <summary>
            A tree of TextAnchorNodes.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.TextAnchorTree.SwapAnchors(ICSharpCode.AvalonEdit.Document.TextAnchorNode,ICSharpCode.AvalonEdit.Document.TextAnchorNode)">
            <summary>
            Swaps the anchors stored in the two nodes.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.TextAnchorTree.FindNode(System.Int32@)">
            <summary>
            Finds the node at the specified offset.
            After the method has run, offset is relative to the beginning of the returned node.
            </summary>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Gui.VisualLine">
            <summary>
            Represents a visual line in the document.
            A visual line usually corresponds to one DocumentLine, but it can span multiple lines if
            all but the first are collapsed.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Gui.VisualLine.GetVisualColumn(System.Int32)">
            <summary>
            Gets the visual column from a document offset relative to the first line start.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Gui.VisualLine.GetRelativeOffset(System.Int32)">
            <summary>
            Gets the document offset (relative to the first line start) from a visual column.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Gui.VisualLine.GetTextLine(System.Int32)">
            <summary>
            Gets the text line containing the specified visual column.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Gui.VisualLine.GetTextLineVisualYPosition(System.Windows.Media.TextFormatting.TextLine,ICSharpCode.AvalonEdit.Gui.VisualYPosition)">
            <summary>
            Gets the visual top from the specified text line.
            </summary>
            <returns>Distance in device-independent pixels
            from the top of the document to the top of the specified text line.</returns>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Gui.VisualLine.GetTextLineVisualStartColumn(System.Windows.Media.TextFormatting.TextLine)">
            <summary>
            Gets the start visual column from the specified text line.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Gui.VisualLine.GetTextLineByVisualYPosition(System.Double)">
            <summary>
            Gets a TextLine by the visual position.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Gui.VisualLine.GetVisualPosition(System.Int32,ICSharpCode.AvalonEdit.Gui.VisualYPosition)">
            <summary>
            Gets the visual position from the specified visualColumn.
            </summary>
            <returns>Position in device-independent pixels
            relative to the top left of the document.</returns>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Gui.VisualLine.GetVisualColumn(System.Windows.Point)">
            <summary>
            Gets the visual column from a document position (relative to top left of the document).
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Gui.VisualLine.GetNextCaretPosition(System.Int32,System.Boolean,ICSharpCode.AvalonEdit.Gui.CaretPositioningMode)">
            <summary>
            Gets the next possible caret position after visualColumn, or -1 if there is no caret position.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Gui.VisualLine.FirstDocumentLine">
            <summary>
            Gets the first document line displayed by this visual line.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Gui.VisualLine.LastDocumentLine">
            <summary>
            Gets the last document line displayed by this visual line.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Gui.VisualLine.Elements">
            <summary>
            Gets a read-only collection of line elements.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Gui.VisualLine.TextLines">
            <summary>
            Gets a read-only collection of text lines.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Gui.VisualLine.VisualLength">
            <summary>
            Length in visual line coordinates.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Gui.VisualLine.Height">
            <summary>
            Gets the height of the visual line in device-independent pixels.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Gui.VisualLine.VisualTop">
            <summary>
            Gets the position at which the line is visible.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Gui.VisualLine.IsDisposed">
            <summary>
            Gets whether the visual line was disposed.
            </summary>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Gui.TextViewWeakEventManager">
            <summary>
            Contains weak event managers for the TextView events.
            </summary>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Gui.TextViewWeakEventManager.DocumentChanged">
            <summary>
            Weak event manager for the <see cref="E:ICSharpCode.AvalonEdit.Gui.TextView.DocumentChanged"/> event.
            </summary>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Utils.WeakEventManagerBase`2">
            <summary>
            WeakEventManager with AddListener/RemoveListener and CurrentManager implementation.
            Helps implementing the WeakEventManager pattern with less code.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Utils.WeakEventManagerBase`2.#ctor">
            <summary>
            Creates a new WeakEventManagerBase instance.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Utils.WeakEventManagerBase`2.AddListener(`1,System.Windows.IWeakEventListener)">
            <summary>
            Adds a weak event listener.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Utils.WeakEventManagerBase`2.RemoveListener(`1,System.Windows.IWeakEventListener)">
            <summary>
            Removes a weak event listener.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Utils.WeakEventManagerBase`2.StartListening(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Utils.WeakEventManagerBase`2.StopListening(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Utils.WeakEventManagerBase`2.StartListening(`1)">
            <summary>
            Attaches the event handler.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Utils.WeakEventManagerBase`2.StopListening(`1)">
            <summary>
            Detaches the event handler.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Utils.WeakEventManagerBase`2.CurrentManager">
            <summary>
            Gets the current manager.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Gui.TextViewWeakEventManager.DocumentChanged.StartListening(ICSharpCode.AvalonEdit.Gui.TextView)">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Gui.TextViewWeakEventManager.DocumentChanged.StopListening(ICSharpCode.AvalonEdit.Gui.TextView)">
            <inheritdoc/>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Gui.TextViewWeakEventManager.VisualLinesChanged">
            <summary>
            Weak event manager for the <see cref="E:ICSharpCode.AvalonEdit.Gui.TextView.VisualLinesChanged"/> event.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Gui.TextViewWeakEventManager.VisualLinesChanged.StartListening(ICSharpCode.AvalonEdit.Gui.TextView)">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Gui.TextViewWeakEventManager.VisualLinesChanged.StopListening(ICSharpCode.AvalonEdit.Gui.TextView)">
            <inheritdoc/>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Gui.TextViewWeakEventManager.ScrollOffsetChanged">
            <summary>
            Weak event manager for the <see cref="E:ICSharpCode.AvalonEdit.Gui.TextView.ScrollOffsetChanged"/> event.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Gui.TextViewWeakEventManager.ScrollOffsetChanged.StartListening(ICSharpCode.AvalonEdit.Gui.TextView)">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Gui.TextViewWeakEventManager.ScrollOffsetChanged.StopListening(ICSharpCode.AvalonEdit.Gui.TextView)">
            <inheritdoc/>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Gui.IVisualLineTransformer">
            <summary>
            Allows transforming visual line elements.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Gui.IVisualLineTransformer.Transform(ICSharpCode.AvalonEdit.Gui.ITextRunConstructionContext,System.Collections.Generic.IList{ICSharpCode.AvalonEdit.Gui.VisualLineElement})">
            <summary>
            Applies the transformation to the specified list of visual line elements.
            </summary>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Gui.DragDropException">
            <summary>
            Wraps exceptions that occur during drag'n'drop.
            Exceptions during drag'n'drop might
            get swallowed by WPF/COM, so AvalonEdit catches them and re-throws them later
            wrapped in a DragDropException.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Gui.DragDropException.#ctor">
            <summary>
            Creates a new DragDropException.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Gui.DragDropException.#ctor(System.String)">
            <summary>
            Creates a new DragDropException.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Gui.DragDropException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new DragDropException.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Gui.DragDropException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Deserializes a DragDropException.
            </summary>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Document.TextDocumentWeakEventManager">
            <summary>
            Contains weak event managers for the TextDocument events.
            </summary>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Document.TextDocumentWeakEventManager.UpdateStarted">
            <summary>
            Weak event manager for the <see cref="E:ICSharpCode.AvalonEdit.Document.TextDocument.UpdateStarted"/> event.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.TextDocumentWeakEventManager.UpdateStarted.StartListening(ICSharpCode.AvalonEdit.Document.TextDocument)">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.TextDocumentWeakEventManager.UpdateStarted.StopListening(ICSharpCode.AvalonEdit.Document.TextDocument)">
            <inheritdoc/>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Document.TextDocumentWeakEventManager.UpdateFinished">
            <summary>
            Weak event manager for the <see cref="E:ICSharpCode.AvalonEdit.Document.TextDocument.UpdateFinished"/> event.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.TextDocumentWeakEventManager.UpdateFinished.StartListening(ICSharpCode.AvalonEdit.Document.TextDocument)">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.TextDocumentWeakEventManager.UpdateFinished.StopListening(ICSharpCode.AvalonEdit.Document.TextDocument)">
            <inheritdoc/>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Document.TextDocumentWeakEventManager.Changing">
            <summary>
            Weak event manager for the <see cref="E:ICSharpCode.AvalonEdit.Document.TextDocument.Changing"/> event.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.TextDocumentWeakEventManager.Changing.StartListening(ICSharpCode.AvalonEdit.Document.TextDocument)">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.TextDocumentWeakEventManager.Changing.StopListening(ICSharpCode.AvalonEdit.Document.TextDocument)">
            <inheritdoc/>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Document.TextDocumentWeakEventManager.Changed">
            <summary>
            Weak event manager for the <see cref="E:ICSharpCode.AvalonEdit.Document.TextDocument.Changed"/> event.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.TextDocumentWeakEventManager.Changed.StartListening(ICSharpCode.AvalonEdit.Document.TextDocument)">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.TextDocumentWeakEventManager.Changed.StopListening(ICSharpCode.AvalonEdit.Document.TextDocument)">
            <inheritdoc/>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Document.TextDocumentWeakEventManager.LineCountChanged">
            <summary>
            Weak event manager for the <see cref="E:ICSharpCode.AvalonEdit.Document.TextDocument.LineCountChanged"/> event.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.TextDocumentWeakEventManager.LineCountChanged.StartListening(ICSharpCode.AvalonEdit.Document.TextDocument)">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.TextDocumentWeakEventManager.LineCountChanged.StopListening(ICSharpCode.AvalonEdit.Document.TextDocument)">
            <inheritdoc/>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Document.TextDocumentWeakEventManager.TextLengthChanged">
            <summary>
            Weak event manager for the <see cref="E:ICSharpCode.AvalonEdit.Document.TextDocument.TextLengthChanged"/> event.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.TextDocumentWeakEventManager.TextLengthChanged.StartListening(ICSharpCode.AvalonEdit.Document.TextDocument)">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.TextDocumentWeakEventManager.TextLengthChanged.StopListening(ICSharpCode.AvalonEdit.Document.TextDocument)">
            <inheritdoc/>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Document.TextDocumentWeakEventManager.TextChanged">
            <summary>
            Weak event manager for the <see cref="E:ICSharpCode.AvalonEdit.Document.TextDocument.TextChanged"/> event.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.TextDocumentWeakEventManager.TextChanged.StartListening(ICSharpCode.AvalonEdit.Document.TextDocument)">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.TextDocumentWeakEventManager.TextChanged.StopListening(ICSharpCode.AvalonEdit.Document.TextDocument)">
            <inheritdoc/>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Utils.PropertyChangedWeakEventManager">
            <summary>
            WeakEventManager for INotifyPropertyChanged.PropertyChanged.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Utils.PropertyChangedWeakEventManager.StartListening(System.ComponentModel.INotifyPropertyChanged)">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Utils.PropertyChangedWeakEventManager.StopListening(System.ComponentModel.INotifyPropertyChanged)">
            <inheritdoc/>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Utils.ImmutableStack`1">
            <summary>
            An immutable stack.
            </summary>
        </member>
        <member name="F:ICSharpCode.AvalonEdit.Utils.ImmutableStack`1.Empty">
            <summary>
            Gets the empty stack instance.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Utils.ImmutableStack`1.Push(`0)">
            <summary>
            Pushes an item on the stack. This does not modify the stack itself, but returns a new
            one with the value pushed.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Utils.ImmutableStack`1.Peek">
            <summary>
            Gets the item on the top of the stack.
            </summary>
            <exception cref="T:System.InvalidOperationException">The stack is empty.</exception>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Utils.ImmutableStack`1.Pop">
            <summary>
            Gets the stack with the top item removed.
            </summary>
            <exception cref="T:System.InvalidOperationException">The stack is empty.</exception>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Utils.ImmutableStack`1.GetEnumerator">
            <summary>
            Gets an enumerator that iterates through the stack top-to-bottom.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Utils.ImmutableStack`1.ToString">
            <inheritdoc/>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Utils.ImmutableStack`1.IsEmpty">
            <summary>
            Gets if this stack is empty.
            </summary>
        </member>
        <member name="F:ICSharpCode.AvalonEdit.Utils.Constants.PixelPerPoint">
            <summary>
            Multiply with this constant to convert from points to device-independent pixels.
            </summary>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Document.TextDocument">
            <summary>
            Runtimes:
            n = number of lines in the document
            </summary>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Document.ITextSource">
            <summary>
            Interface for read-only access to a text source.
            </summary>
            <seealso cref="T:ICSharpCode.AvalonEdit.Document.TextDocument"/>
            <seealso cref="T:ICSharpCode.AvalonEdit.Document.StringTextSource"/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.ITextSource.GetCharAt(System.Int32)">
            <summary>
            Gets a character at the specified position in the document.
            </summary>
            <paramref name="offset">The index of the character to get.</paramref>
            <exception cref="T:System.ArgumentOutOfRangeException">Offset is outside the valid range (0 to TextLength-1).</exception>
            <returns>The character at the specified position.</returns>
            <remarks>This is the same as Text[offset], but is usually
            more efficient because it doesn't require creating a String object.</remarks>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.ITextSource.GetText(System.Int32,System.Int32)">
            <summary>
            Retrieves the text for a portion of the document.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">offset or length is outside the valid range.</exception>
            <remarks>This is the same as Text.Substring, but is usually
            more efficient because it doesn't require creating a String object for the whole document.</remarks>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Document.ITextSource.Text">
            <summary>
            Gets the whole text as string.
            </summary>
        </member>
        <member name="E:ICSharpCode.AvalonEdit.Document.ITextSource.TextChanged">
            <summary>
            Is raised when the Text property changes.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Document.ITextSource.TextLength">
            <summary>
            Gets the total text length.
            </summary>
            <returns>The length of the text, in characters.</returns>
            <remarks>This is the same as Text.Length, but is usually
            more efficient because it doesn't require creating a String object.</remarks>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.TextDocument.VerifyAccess">
            <summary>
            Verifies that the current thread is the documents owner thread.
            Throws an <see cref="T:System.InvalidOperationException"/> if the wrong thread accesses the TextDocument.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.TextDocument.SetOwnerThread(System.Threading.Thread)">
            <summary>
            Transfers ownership of the document to another thread. This method can be used to load
            a file into a TextDocument on a background thread and then transfer ownership to the UI thread
            for displaying the document.
            </summary>
            <remarks>
            The owner can be set to null, which means that no thread can access the document. But, if the document
            has no owner thread, any thread may take ownership by calling SetOwnerThread.
            </remarks>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.TextDocument.#ctor">
            <summary>
            Create an empty text document.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.TextDocument.GetText(System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.TextDocument.GetText(ICSharpCode.AvalonEdit.Document.ISegment)">
            <summary>
            Retrieves the text for a portion of the document.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.TextDocument.GetCharAt(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.TextDocument.RunUpdate">
            <summary>
            Immediately calls <see cref="M:ICSharpCode.AvalonEdit.Document.TextDocument.BeginUpdate"/>,
            and returns an IDisposable that calls <see cref="M:ICSharpCode.AvalonEdit.Document.TextDocument.EndUpdate"/>.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.TextDocument.BeginUpdate">
            <summary>
            Begins a group of document changes.
            Some events are suspended until EndUpdate is called, and the <see cref="P:ICSharpCode.AvalonEdit.Document.TextDocument.UndoStack"/> will
            group all changes into a single action.
            Calling BeginUpdate several times increments a counter, only after the appropriate number
            of EndUpdate calls the events resume their work.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.TextDocument.EndUpdate">
            <summary>
            Ends a group of document changes.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.TextDocument.FireChangeEvents">
            <summary>
            Fires TextChanged, TextLengthChanged, TotalHeightChanged, LineCountChanged if required.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.TextDocument.Insert(System.Int32,System.String)">
            <summary>
            Inserts text.
            Runtime:
             for updating the text buffer: m=size of new text, d=distance to last change
            	usual:	O(m+d)
            	rare:	O(m+n)
             for updating the document lines: O(m*log n), m=number of changed lines
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.TextDocument.Remove(System.Int32,System.Int32)">
            <summary>
            Removes text.
            Runtime:
             for updating the text buffer: d=distance to last change
            	usual:	O(d)
            	rare:	O(n)
             for updating the document lines: O(m*log n), m=number of changed lines
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.TextDocument.Replace(ICSharpCode.AvalonEdit.Document.ISegment,System.String)">
            <summary>
            Replaces text.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.TextDocument.Replace(System.Int32,System.Int32,System.String)">
            <summary>
            Replaces text.
            Runtime:
             for updating the text buffer: m=size of new text, d=distance to last change
            	usual:	O(m+d)
            	rare:	O(m+n)
             for updating the document lines: O(m*log n), m=number of changed lines
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.TextDocument.GetLineByNumber(System.Int32)">
            <summary>
            Gets a line by the line number: O(log n)
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.TextDocument.GetLineByOffset(System.Int32)">
            <summary>
            Gets a document lines by offset.
            Runtime: O(log n)
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.TextDocument.GetOffset(ICSharpCode.AvalonEdit.Document.TextLocation)">
            <summary>
            Gets the offset from a text location.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.TextDocument.GetLocation(System.Int32)">
            <summary>
            Gets the location from an offset.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.TextDocument.CreateAnchor(System.Int32)">
            <summary>
            Creates a new text anchor at the specified offset.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.TextDocument.GetLineTreeAsString">
            <summary>
            Gets the document lines tree in string form.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.TextDocument.GetTextAnchorTreeAsString">
            <summary>
            Gets the text anchor tree in string form.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Document.TextDocument.Text">
            <summary>
            Gets/Sets the text of the whole document.
            Get: O(n)
            Set: O(n * log n)
            </summary>
        </member>
        <member name="E:ICSharpCode.AvalonEdit.Document.TextDocument.TextChanged">
            <inheritdoc/>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Document.TextDocument.TextLength">
            <inheritdoc/>
        </member>
        <member name="E:ICSharpCode.AvalonEdit.Document.TextDocument.TextLengthChanged">
            <summary>
            Is raised when the TextLength property changes.
            </summary>
        </member>
        <member name="E:ICSharpCode.AvalonEdit.Document.TextDocument.Changing">
            <summary>
            Is raised before the document changes.
            </summary>
        </member>
        <member name="E:ICSharpCode.AvalonEdit.Document.TextDocument.Changed">
            <summary>
            Is raised after the document has changed.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Document.TextDocument.IsInUpdate">
            <summary>
            Gets if an update is running.
            </summary>
        </member>
        <member name="E:ICSharpCode.AvalonEdit.Document.TextDocument.UpdateStarted">
            <summary>
            Occurs when a document change starts.
            </summary>
        </member>
        <member name="E:ICSharpCode.AvalonEdit.Document.TextDocument.UpdateFinished">
            <summary>
            Occurs when a document change is finished.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Document.TextDocument.Lines">
            <summary>
            Gets a read-only list of lines.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Document.TextDocument.LineTrackers">
            <summary>
            Gets the list of <see cref="T:ICSharpCode.AvalonEdit.Document.ILineTracker"/>s attached to this document.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Document.TextDocument.UndoStack">
            <summary>
            Gets the <see cref="P:ICSharpCode.AvalonEdit.Document.TextDocument.UndoStack"/> of the document.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Document.TextDocument.LineCount">
            <summary>
            Gets the total number of lines in the document.
            Runtime: O(1).
            </summary>
        </member>
        <member name="E:ICSharpCode.AvalonEdit.Document.TextDocument.LineCountChanged">
            <summary>
            Is raised when the LineCount property changes.
            </summary>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Document.DocumentLine">
            <summary>
            Represents a line inside a <see cref="T:ICSharpCode.AvalonEdit.Document.TextDocument"/>.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.DocumentLine.ToString">
            <summary>
            Gets a string representation of the line.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.DocumentLine.ResetLine">
            <summary>
            Resets the line to enable its reuse after a document rebuild.
            </summary>
        </member>
        <member name="F:ICSharpCode.AvalonEdit.Document.DocumentLine.nodeTotalCount">
            <summary>
            The number of lines in this node and its child nodes.
            Invariant:
              nodeTotalCount = 1 + left.nodeTotalCount + right.nodeTotalCount
            </summary>
        </member>
        <member name="F:ICSharpCode.AvalonEdit.Document.DocumentLine.nodeTotalLength">
            <summary>
            The total text length of this node and its child nodes.
            Invariant:
              nodeTotalLength = left.nodeTotalLength + documentLine.TotalLength + right.nodeTotalLength
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Document.DocumentLine.Document">
            <summary>
            Gets the text document that owns this DocumentLine. O(1).
            </summary>
            <remarks>This property is still available even if the line was deleted.</remarks>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Document.DocumentLine.Text">
            <summary>
            Gets the text on this line.
            </summary>
            <exception cref="T:System.InvalidOperationException">The line was deleted.</exception>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Document.DocumentLine.IsDeleted">
            <summary>
            Gets if this line was deleted from the document.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Document.DocumentLine.LineNumber">
            <summary>
            Gets the number of this line.
            Runtime: O(log n)
            </summary>
            <exception cref="T:System.InvalidOperationException">The line was deleted.</exception>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Document.DocumentLine.Offset">
            <summary>
            Gets the starting offset of the line in the document's text.
            Runtime: O(log n)
            </summary>
            <exception cref="T:System.InvalidOperationException">The line was deleted.</exception>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Document.DocumentLine.EndOffset">
            <summary>
            Gets the end offset of the line in the document's text (the offset before the newline character).
            Runtime: O(log n)
            </summary>
            <exception cref="T:System.InvalidOperationException">The line was deleted.</exception>
            <remarks>EndOffset = <see cref="P:ICSharpCode.AvalonEdit.Document.DocumentLine.Offset"/> + <see cref="P:ICSharpCode.AvalonEdit.Document.DocumentLine.Length"/>.</remarks>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Document.DocumentLine.Length">
            <summary>
            Gets the length of this line. O(1)
            </summary>
            <remarks>This property is still available even if the line was deleted;
            in that case, it contains the line's length before the deletion.</remarks>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Document.DocumentLine.TotalLength">
            <summary>
            Gets the length of this line, including the line delimiter. O(1)
            </summary>
            <remarks>This property is still available even if the line was deleted;
            in that case, it contains the line's length before the deletion.</remarks>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Document.DocumentLine.DelimiterLength">
            <summary>
            Gets the length of the newline.
            </summary>
            <remarks>This property is still available even if the line was deleted;
            in that case, it contains the line's length before the deletion.</remarks>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Document.DocumentLine.NextLine">
            <summary>
            Gets the next line in the document.
            </summary>
            <returns>The line following this line, or null if this is the last line.</returns>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Document.DocumentLine.PreviousLine">
            <summary>
            Gets the previous line in the document.
            </summary>
            <returns>The line before this line, or null if this is the first line.</returns>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Indentation.DefaultIndentationStrategy">
            <summary>
            Handles indentation by copying the indentation from the previous line.
            Does not support indenting multiple lines.
            </summary>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Indentation.IIndentationStrategy">
            <summary>
            Strategy how the text editor handles indentation when new lines are inserted.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Indentation.IIndentationStrategy.IndentLine(ICSharpCode.AvalonEdit.Document.DocumentLine)">
            <summary>
            Sets the indentation for the specified line.
            Usually this is constructed from the indentation of the previous line.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Indentation.IIndentationStrategy.IndentLines(System.Int32,System.Int32)">
            <summary>
            Reindents a set of lines.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Indentation.DefaultIndentationStrategy.IndentLine(ICSharpCode.AvalonEdit.Document.DocumentLine)">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Indentation.DefaultIndentationStrategy.IndentLines(System.Int32,System.Int32)">
            <summary>
            Does nothing: indenting multiple lines is useless without a smart indentation strategy.
            </summary>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Highlighting.Xshd.SaveXshdVisitor">
            <summary>
            Xshd visitor implementation that saves an .xshd file as XML.
            </summary>
        </member>
        <member name="F:ICSharpCode.AvalonEdit.Highlighting.Xshd.SaveXshdVisitor.Namespace">
            <summary>
            XML namespace for XSHD.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Highlighting.Xshd.SaveXshdVisitor.#ctor(System.Xml.XmlWriter)">
            <summary>
            Creates a new SaveXshdVisitor instance.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Highlighting.Xshd.SaveXshdVisitor.WriteDefinition(ICSharpCode.AvalonEdit.Highlighting.Xshd.XshdSyntaxDefinition)">
            <summary>
            Writes the specified syntax definition.
            </summary>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Gui.HeightTree">
            <summary>
            Red-black tree similar to DocumentLineTree, augmented with collapsing and height data.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Gui.HeightTree.RebuildDocument">
            <summary>
            Rebuild the tree, in O(n).
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Gui.HeightTree.BuildTree(ICSharpCode.AvalonEdit.Gui.HeightTreeNode[],System.Int32,System.Int32,System.Int32)">
            <summary>
            build a tree from a list of nodes
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Gui.HeightTree.CollapseText(ICSharpCode.AvalonEdit.Document.DocumentLine,ICSharpCode.AvalonEdit.Document.DocumentLine)">
            <summary>
            Collapses the specified text section.
            Runtime: O(log n)
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Gui.HeightTree.CheckAllContainedIn(System.Collections.Generic.IEnumerable{ICSharpCode.AvalonEdit.Gui.CollapsedLineSection},System.Collections.Generic.ICollection{ICSharpCode.AvalonEdit.Gui.CollapsedLineSection})">
            <summary>
            Checks that all elements in list1 are contained in list2.
            </summary>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Gui.Selection">
            <summary>
            Base class for selections.
            </summary>
        </member>
        <member name="F:ICSharpCode.AvalonEdit.Gui.Selection.Empty">
            <summary>
            Gets the empty selection.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Gui.Selection.RemoveSelectedText(ICSharpCode.AvalonEdit.TextArea)">
            <summary>
            Removes the selected text from the document.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Gui.Selection.UpdateOnDocumentChange(ICSharpCode.AvalonEdit.Document.DocumentChangeEventArgs)">
            <summary>
            Updates the selection when the document changes.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Gui.Selection.SetEndpoint(System.Int32)">
            <summary>
            Returns a new selection with the changed end point.
            </summary>
            <exception cref="T:System.NotSupportedException">Cannot set endpoint for empty selection</exception>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Gui.Selection.StartSelectionOrSetEndpoint(System.Int32,System.Int32)">
            <summary>
            If this selection is empty, starts a new selection from <paramref name="startOffset"/> to
            <paramref name="newEndOffset"/>, otherwise, changes the endpoint of this selection.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Gui.Selection.GetIsMultiline(ICSharpCode.AvalonEdit.Document.TextDocument)">
            <summary>
            Gets whether the selection is multi-line.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Gui.Selection.GetText(ICSharpCode.AvalonEdit.Document.TextDocument)">
            <summary>
            Gets the selected text.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Gui.Selection.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Gui.Selection.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Gui.Selection.Contains(System.Int32)">
            <summary>
            Gets whether the specified offset is included in the selection.
            </summary>
            <returns>True, if the selection contains the offset (selection borders inclusive);
            otherwise, false.</returns>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Gui.Selection.Segments">
            <summary>
            Gets the selected text segments.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Gui.Selection.SurroundingSegment">
            <summary>
            Gets the smallest segment that contains all segments in this selection.
            Returns null if the selection is empty.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Gui.Selection.IsEmpty">
            <summary>
            Gets whether the selection is empty.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Gui.Selection.Length">
            <summary>
            Gets the selection length.
            </summary>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Gui.SimpleSelection">
            <summary>
            A simple selection.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Gui.SimpleSelection.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates a new SimpleSelection instance.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Gui.SimpleSelection.#ctor(ICSharpCode.AvalonEdit.Document.ISegment)">
            <summary>
            Creates a new SimpleSelection instance.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Gui.SimpleSelection.RemoveSelectedText(ICSharpCode.AvalonEdit.TextArea)">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Gui.SimpleSelection.UpdateOnDocumentChange(ICSharpCode.AvalonEdit.Document.DocumentChangeEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Gui.SimpleSelection.SetEndpoint(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Gui.SimpleSelection.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Gui.SimpleSelection.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Gui.SimpleSelection.ToString">
            <inheritdoc/>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Gui.SimpleSelection.Segments">
            <inheritdoc/>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Gui.SimpleSelection.SurroundingSegment">
            <inheritdoc/>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Gui.SimpleSelection.StartOffset">
            <summary>
            Gets the start offset.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Gui.SimpleSelection.EndOffset">
            <summary>
            Gets the end offset.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Gui.SimpleSelection.IsEmpty">
            <inheritdoc/>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Gui.SimpleSelection.Length">
            <inheritdoc/>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Utils.Win32">
            <summary>
            Wrapper around Win32 functions.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Utils.Win32.CaretBlinkTime">
            <summary>
            Gets the caret blink time.
            </summary>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Utils.FileReader">
            <summary>
            Class that can open text files with auto-detection of the encoding.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Utils.FileReader.IsUnicode(System.Text.Encoding)">
            <summary>
            Gets if the given encoding is a Unicode encoding (UTF).
            </summary>
            <remarks>
            Returns true for UTF-7, UTF-8, UTF-16 LE, UTF-16 BE, UTF-32 LE and UTF-32 BE.
            Returns false for all other encodings.
            </remarks>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Utils.FileReader.ReadFileContent(System.IO.Stream,System.Text.Encoding)">
            <summary>
            Reads the content of the given stream.
            </summary>
            <param name="stream">The stream to read.
            The stream must support seeking and must be positioned at its beginning.</param>
            <param name="defaultEncoding">The encoding to use if the encoding cannot be auto-detected.</param>
            <returns>The file content as string.</returns>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Utils.FileReader.ReadFileContent(System.String,System.Text.Encoding)">
            <summary>
            Reads the content of the file.
            </summary>
            <param name="fileName">The file name.</param>
            <param name="defaultEncoding">The encoding to use if the encoding cannot be auto-detected.</param>
            <returns>The file content as string.</returns>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Utils.FileReader.OpenFile(System.String,System.Text.Encoding)">
            <summary>
            Opens the specified file for reading.
            </summary>
            <param name="fileName">The file to open.</param>
            <param name="defaultEncoding">The encoding to use if the encoding cannot be auto-detected.</param>
            <returns>Returns a StreamReader that reads from the stream. Use
            <see cref="P:System.IO.StreamReader.CurrentEncoding"/> to get the encoding that was used.</returns>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Utils.FileReader.OpenStream(System.IO.Stream,System.Text.Encoding)">
            <summary>
            Opens the specified stream for reading.
            </summary>
            <param name="stream">The stream to open.</param>
            <param name="defaultEncoding">The encoding to use if the encoding cannot be auto-detected.</param>
            <returns>Returns a StreamReader that reads from the stream. Use
            <see cref="P:System.IO.StreamReader.CurrentEncoding"/> to get the encoding that was used.</returns>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Document.GapTextBuffer">
            <summary>
            Implementation of a gap text buffer.
            </summary>
        </member>
        <member name="F:ICSharpCode.AvalonEdit.Document.GapTextBuffer.minGapLength">
            <summary>
            when gap is too small for inserted text or gap is too large (exceeds maxGapLength),
            a new buffer is reallocated with a new gap of at least this size.
            </summary>
        </member>
        <member name="F:ICSharpCode.AvalonEdit.Document.GapTextBuffer.maxGapLength">
            <summary>
            when the gap exceeds this size, reallocate a smaller buffer
            </summary>
        </member>
        <member name="F:ICSharpCode.AvalonEdit.Document.GapTextBuffer.textContent">
            <summary>
            The current text content.
            Is set to null whenever the buffer changes, and gets a value only when the
            full text content is requested.
            </summary>
        </member>
        <member name="F:ICSharpCode.AvalonEdit.Document.GapTextBuffer.lastGetTextResult">
            <summary>
            last GetText result
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.GapTextBuffer.Insert(System.Int32,System.String)">
            <summary>
            Inserts text at the specified offset.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.GapTextBuffer.Remove(System.Int32,System.Int32,System.Int32)">
            <summary>
            Remove <paramref name="length"/> characters at <paramref name="offset"/>.
            Leave a gap of at least <paramref name="reserveGapSize"/>.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Document.GapTextBuffer.Text">
            <summary>
            Gets the buffer content.
            </summary>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Document.DocumentChangeEventArgs">
            <summary>
            Describes a change of the document text.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.DocumentChangeEventArgs.GetNewOffset(System.Int32,ICSharpCode.AvalonEdit.Document.AnchorMovementType)">
            <summary>
            Gets the new offset where the specified offset moves after this document change.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.DocumentChangeEventArgs.#ctor(System.Int32,System.Int32,System.String)">
            <summary>
            Creates a new DocumentChangeEventArgs object.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Document.DocumentChangeEventArgs.Offset">
            <summary>
            The offset at which the change occurs.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Document.DocumentChangeEventArgs.RemovalLength">
            <summary>
            The number of characters removed.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Document.DocumentChangeEventArgs.InsertedText">
            <summary>
            The text that was inserted.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Document.DocumentChangeEventArgs.InsertionLength">
            <summary>
            The number of characters inserted.
            </summary>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Highlighting.Xshd.XshdSyntaxDefinition">
            <summary>
            A &lt;SyntaxDefinition&gt; element.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Highlighting.Xshd.XshdSyntaxDefinition.#ctor">
            <summary>
            Creates a new XshdSyntaxDefinition object.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Highlighting.Xshd.XshdSyntaxDefinition.AcceptElements(ICSharpCode.AvalonEdit.Highlighting.Xshd.IXshdVisitor)">
            <summary>
            Applies the visitor to all elements.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Highlighting.Xshd.XshdSyntaxDefinition.Name">
            <summary>
            Gets/sets the definition name
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Highlighting.Xshd.XshdSyntaxDefinition.Extensions">
            <summary>
            Gets the associated extensions.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Highlighting.Xshd.XshdSyntaxDefinition.Elements">
            <summary>
            Gets the collection of elements.
            </summary>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Highlighting.HighlightingColorizer">
            <summary>
            A colorizes that interprets a highlighting rule set and colors the document accordingly.
            </summary>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Gui.DocumentColorizingTransformer">
            <summary>
            Base class for <see cref="T:ICSharpCode.AvalonEdit.Gui.IVisualLineTransformer"/> that helps
            colorizing the document. Derived classes can work with document lines
            and text offsets and this class takes care of the visual lines and visual columns.
            </summary>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Gui.ColorizingTransformer">
            <summary>
            Base class for <see cref="T:ICSharpCode.AvalonEdit.Gui.IVisualLineTransformer"/> that helps
            splitting visual elements so that colors (and other text properties) can be easily assigned
            to individual words/characters.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Gui.ColorizingTransformer.Transform(ICSharpCode.AvalonEdit.Gui.ITextRunConstructionContext,System.Collections.Generic.IList{ICSharpCode.AvalonEdit.Gui.VisualLineElement})">
            <summary>
            <see cref="M:ICSharpCode.AvalonEdit.Gui.IVisualLineTransformer.Transform(ICSharpCode.AvalonEdit.Gui.ITextRunConstructionContext,System.Collections.Generic.IList{ICSharpCode.AvalonEdit.Gui.VisualLineElement})"/> implementation.
            Sets <see cref="P:ICSharpCode.AvalonEdit.Gui.ColorizingTransformer.CurrentElements"/> and calls <see cref="M:ICSharpCode.AvalonEdit.Gui.ColorizingTransformer.Colorize(ICSharpCode.AvalonEdit.Gui.ITextRunConstructionContext)"/>.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Gui.ColorizingTransformer.Colorize(ICSharpCode.AvalonEdit.Gui.ITextRunConstructionContext)">
            <summary>
            Performs the colorization.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Gui.ColorizingTransformer.ChangeVisualElements(System.Int32,System.Int32,System.Action{ICSharpCode.AvalonEdit.Gui.VisualLineElement})">
            <summary>
            Changes visual element properties.
            This method accesses <see cref="P:ICSharpCode.AvalonEdit.Gui.ColorizingTransformer.CurrentElements"/>, so it must be called only during
            a <see cref="M:ICSharpCode.AvalonEdit.Gui.ColorizingTransformer.Transform(ICSharpCode.AvalonEdit.Gui.ITextRunConstructionContext,System.Collections.Generic.IList{ICSharpCode.AvalonEdit.Gui.VisualLineElement})"/> call.
            This method splits <see cref="T:ICSharpCode.AvalonEdit.Gui.VisualLineElement"/>s as necessary to ensure that the region
            can be colored by setting the <see cref="P:ICSharpCode.AvalonEdit.Gui.VisualLineElement.TextRunProperties"/> of whole elements,
            and then calls the <paramref name="action"/> on all elements in the region.
            </summary>
            <param name="visualStartColumn">Start visual column of the region to change</param>
            <param name="visualEndColumn">End visual column of the region to change</param>
            <param name="action">Action that changes an individual <see cref="T:ICSharpCode.AvalonEdit.Gui.VisualLineElement"/>.</param>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Gui.ColorizingTransformer.OnAddToTextView(ICSharpCode.AvalonEdit.Gui.TextView)">
            <summary>
            Called when added to a text view.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Gui.ColorizingTransformer.OnRemoveFromTextView(ICSharpCode.AvalonEdit.Gui.TextView)">
            <summary>
            Called when removed from a text view.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Gui.ColorizingTransformer.CurrentElements">
            <summary>
            Gets the list of elements currently being transformed.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Gui.DocumentColorizingTransformer.Colorize(ICSharpCode.AvalonEdit.Gui.ITextRunConstructionContext)">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Gui.DocumentColorizingTransformer.ColorizeLine(ICSharpCode.AvalonEdit.Document.DocumentLine)">
            <summary>
            Override this method to colorize an individual document line.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Gui.DocumentColorizingTransformer.ChangeLinePart(System.Int32,System.Int32,System.Action{ICSharpCode.AvalonEdit.Gui.VisualLineElement})">
            <summary>
            Changes a part of the current document line.
            </summary>
            <param name="startOffset">Start offset of the region to change</param>
            <param name="endOffset">End offset of the region to change</param>
            <param name="action">Action that changes an individual <see cref="T:ICSharpCode.AvalonEdit.Gui.VisualLineElement"/>.</param>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Gui.DocumentColorizingTransformer.CurrentContext">
            <summary>
            Gets the current ITextRunConstructionContext.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Highlighting.HighlightingColorizer.#ctor(ICSharpCode.AvalonEdit.Gui.TextView,ICSharpCode.AvalonEdit.Highlighting.HighlightingRuleSet)">
            <summary>
            Creates a new HighlightingColorizer instance.
            </summary>
            <param name="textView">The text view for which the highlighting should be provided.</param>
            <param name="ruleSet">The root highlighting rule set.</param>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Highlighting.HighlightingColorizer.OnAddToTextView(ICSharpCode.AvalonEdit.Gui.TextView)">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Highlighting.HighlightingColorizer.OnRemoveFromTextView(ICSharpCode.AvalonEdit.Gui.TextView)">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Highlighting.HighlightingColorizer.ColorizeLine(ICSharpCode.AvalonEdit.Document.DocumentLine)">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Highlighting.HighlightingColorizer.ApplyColorToElement(ICSharpCode.AvalonEdit.Gui.VisualLineElement,ICSharpCode.AvalonEdit.Highlighting.HighlightingColor)">
            <summary>
            Applies a highlighting color to a visual line element.
            </summary>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Gui.NoReadOnlySections">
            <summary>
            <see cref="T:ICSharpCode.AvalonEdit.Gui.IReadOnlySectionProvider"/> that has no read-only sections; all text is editable.
            </summary>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Gui.IReadOnlySectionProvider">
            <summary>
            Determines whether the document can be modified.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Gui.IReadOnlySectionProvider.CanInsert(System.Int32)">
            <summary>
            Gets whether insertion is possible at the specified offset.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Gui.IReadOnlySectionProvider.GetDeletableSegments(ICSharpCode.AvalonEdit.Document.ISegment)">
            <summary>
            Gets the deletable segments inside the given segment.
            </summary>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Gui.KnownLayer">
            <summary>
            An enumeration of well-known layers.
            </summary>
        </member>
        <member name="F:ICSharpCode.AvalonEdit.Gui.KnownLayer.Background">
            <summary>
            This layer is in the background.
            There is no UIElement to represent this layer, it is directly drawn in the TextView.
            It is invalid to replace the background layer or insert
            </summary>
            <remarks>This layer is below the Selection layer.</remarks>
        </member>
        <member name="F:ICSharpCode.AvalonEdit.Gui.KnownLayer.Selection">
            <summary>
            This layer contains the selection rectangle.
            </summary>
            <remarks>This layer is between the Background and the Text layers.</remarks>
        </member>
        <member name="F:ICSharpCode.AvalonEdit.Gui.KnownLayer.Text">
            <summary>
            This layer contains the text and inline UI elements.
            </summary>
            <remarks>This layer is between the Selection and the Caret layers.</remarks>
        </member>
        <member name="F:ICSharpCode.AvalonEdit.Gui.KnownLayer.Caret">
            <summary>
            This layer contains the blinking caret.
            </summary>
            <remarks>This layer is above the Text layer.</remarks>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Gui.LayerInsertionPosition">
            <summary>
            Specifies where a new layer is inserted, in relation to an old layer.
            </summary>
        </member>
        <member name="F:ICSharpCode.AvalonEdit.Gui.LayerInsertionPosition.Below">
            <summary>
            The new layer is inserted below the specified layer.
            </summary>
        </member>
        <member name="F:ICSharpCode.AvalonEdit.Gui.LayerInsertionPosition.Replace">
            <summary>
            The new layer replaces the specified layer. The old layer is removed
            from the <see cref="P:ICSharpCode.AvalonEdit.Gui.TextView.Layers"/> collection.
            </summary>
        </member>
        <member name="F:ICSharpCode.AvalonEdit.Gui.LayerInsertionPosition.Above">
            <summary>
            The new layer is inserted above the specified layer.
            </summary>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Document.UndoOperationGroup">
            <summary>
            This class stacks the last x operations from the undostack and makes
            one undo/redo operation from it.
            </summary>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Document.IUndoableOperation">
            <summary>
            This Interface describes a the basic Undo/Redo operation
            all Undo Operations must implement this interface.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.IUndoableOperation.Undo">
            <summary>
            Undo the last operation
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.IUndoableOperation.Redo">
            <summary>
            Redo the last operation
            </summary>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.CodeCompletion.CompletionWindow">
            <summary>
            The code completion window.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.CodeCompletion.CompletionWindow.#ctor(ICSharpCode.AvalonEdit.TextArea)">
            <summary>
            Creates a new code completion window.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.CodeCompletion.CompletionWindow.OnSourceInitialized(System.EventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.CodeCompletion.CompletionWindow.AttachEvents">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.CodeCompletion.CompletionWindow.DetachEvents">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.CodeCompletion.CompletionWindow.OnClosed(System.EventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.CodeCompletion.CompletionWindow.OnKeyDown(System.Windows.Input.KeyEventArgs)">
            <inheritdoc/>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.CodeCompletion.CompletionWindow.StartOffset">
            <summary>
            Gets/Sets the start offset of the edited text portion.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.CodeCompletion.CompletionWindow.EndOffset">
            <summary>
            Gets/Sets the end offset of the edited text portion.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.CodeCompletion.CompletionWindow.ExpectInsertionBeforeStart">
            <summary>
            Gets/sets whether the completion window should expect text insertion at the start offset,
            which not go into the completion region, but before it.
            </summary>
            <remarks>This property allows only a single insertion, it is reset to false
            when that insertion has occurred.</remarks>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.CodeCompletion.CompletionWindow.CloseWhenCaretAtBeginning">
            <summary>
            When this flag is set, code completion closes if the caret moves to the
            beginning of the allowed range. This is useful in Ctrl+Space and "complete when typing",
            but not in dot-completion.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.CodeCompletion.CompletionWindow.CompletionList">
            <summary>
            Gets the completion list used in this completion window.
            </summary>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.CodeCompletion.CompletionWindow.InputHandler">
            <summary>
            A dummy input handler (that justs invokes the default input handler).
            This is used to ensure the completion window closes when any other input handler
            becomes active.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Utils.ExtensionMethods.IsClose(System.Double,System.Double)">
            <summary>
            Returns true if the doubles are close (difference smaller than 10^-8).
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Utils.ExtensionMethods.IsClose(System.Windows.Size,System.Windows.Size)">
            <summary>
            Returns true if the doubles are close (difference smaller than 10^-8).
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Utils.ExtensionMethods.IsClose(System.Windows.Vector,System.Windows.Vector)">
            <summary>
            Returns true if the doubles are close (difference smaller than 10^-8).
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Utils.ExtensionMethods.CoerceValue(System.Double,System.Double,System.Double)">
            <summary>
            Forces the value to stay between mininum and maximum.
            </summary>
            <returns>minimum, if value is less than minimum.
            Maximum, if value is greater than maximum.
            Otherwise, value.</returns>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Utils.ExtensionMethods.CoerceValue(System.Int32,System.Int32,System.Int32)">
            <summary>
            Forces the value to stay between mininum and maximum.
            </summary>
            <returns>minimum, if value is less than minimum.
            Maximum, if value is greater than maximum.
            Otherwise, value.</returns>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Utils.ExtensionMethods.CreateTypeface(System.Windows.FrameworkElement)">
            <summary>
            Creates typeface from the framework element.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Utils.ExtensionMethods.Sequence``1(``0)">
            <summary>
            Creates an IEnumerable with a single value.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Utils.ExtensionMethods.GetAttributeOrNull(System.Xml.XmlElement,System.String)">
            <summary>
            Gets the value of the attribute, or null if the attribute does not exist.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Utils.ExtensionMethods.GetBoolAttribute(System.Xml.XmlElement,System.String)">
            <summary>
            Gets the value of the attribute as boolean, or null if the attribute does not exist.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Utils.ExtensionMethods.GetBoolAttribute(System.Xml.XmlReader,System.String)">
            <summary>
            Gets the value of the attribute as boolean, or null if the attribute does not exist.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Utils.ExtensionMethods.Contains(ICSharpCode.AvalonEdit.Document.ISegment,System.Int32)">
            <summary>
            Gets whether the segment contains the offset.
            </summary>
            <returns>
            True, if offset is between segment.Start and segment.End (inclusive); otherwise, false.
            </returns>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Utils.ExtensionMethods.GetOverlap(ICSharpCode.AvalonEdit.Document.ISegment,ICSharpCode.AvalonEdit.Document.ISegment)">
            <summary>
            Gets the overlapping portion of the segments.
            Returns SimpleSegment.Invalid if the segments don't overlap.
            </summary>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Document.LineManager">
            <summary>
            Creates/Deletes lines when text is inserted/removed.
            </summary>
        </member>
        <member name="F:ICSharpCode.AvalonEdit.Document.LineManager.lineTrackers">
            <summary>
            A copy of the line trackers. We need a copy so that line trackers may remove themselves
            while being notified (used e.g. by WeakLineTracker)
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.LineManager.SetLineLength(ICSharpCode.AvalonEdit.Document.DocumentLine,System.Int32)">
            <summary>
            Sets the total line length and checks the delimiter.
            This method can cause line to be deleted when it contains a single '\n' character
            and the previous line ends with '\r'.
            </summary>
            <returns>Usually returns <paramref name="line"/>, but if line was deleted due to
            the "\r\n" merge, returns the previous line.</returns>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Highlighting.HighlightingColor">
            <summary>
            A highlighting color is a set of font properties and foreground and background color.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Highlighting.HighlightingColor.ToCss">
            <summary>
            Gets CSS code for the color.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Highlighting.HighlightingColor.FontWeight">
            <summary>
            Gets/sets the font weight. Null if the highlighting color does not change the font weight.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Highlighting.HighlightingColor.FontStyle">
            <summary>
            Gets/sets the font style. Null if the highlighting color does not change the font style.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Highlighting.HighlightingColor.Foreground">
            <summary>
            Gets/sets the foreground color applied by the highlighting.
            </summary>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Highlighting.HighlightingBrush">
            <summary>
            A brush used for syntax highlighting. Can retrieve a real brush on-demand.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Highlighting.HighlightingBrush.GetBrush(ICSharpCode.AvalonEdit.Gui.ITextRunConstructionContext)">
            <summary>
            Gets the real brush.
            </summary>
            <param name="context">The construction context. context can be null!</param>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Highlighting.HighlightingBrush.GetColor(ICSharpCode.AvalonEdit.Gui.ITextRunConstructionContext)">
            <summary>
            Gets the color of the brush.
            </summary>
            <param name="context">The construction context. context can be null!</param>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Highlighting.SimpleHighlightingBrush">
            <summary>
            Highlighting brush implementation that takes a frozen brush.
            </summary>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Highlighting.ResourceKeyHighlightingBrush">
            <summary>
            HighlightingBrush implementation that finds a brush using a resource.
            </summary>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.TextEditor">
            <summary>
            The text editor control.
            Contains a scrollable TextArea.
            </summary>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.ITextEditorComponent">
            <summary>
            Represents a text editor control (<see cref="T:ICSharpCode.AvalonEdit.TextEditor"/>, <see cref="T:ICSharpCode.AvalonEdit.TextArea"/>
            or <see cref="T:ICSharpCode.AvalonEdit.Gui.TextView"/>).
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.ITextEditorComponent.Document">
            <summary>
            Gets the document being edited.
            </summary>
        </member>
        <member name="E:ICSharpCode.AvalonEdit.ITextEditorComponent.DocumentChanged">
            <summary>
            Occurs when the Document property changes (when the text editor is connected to another
            document - not when the document content changes).
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.ITextEditorComponent.Options">
            <summary>
            Gets the options of the text editor.
            </summary>
        </member>
        <member name="E:ICSharpCode.AvalonEdit.ITextEditorComponent.OptionChanged">
            <summary>
            Occurs when the Options property changes, or when an option inside the current option list
            changes.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.TextEditor.#ctor">
            <summary>
            Creates a new TextEditor instance.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.TextEditor.OnGotKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.TextEditor.#ctor(ICSharpCode.AvalonEdit.TextArea)">
            <summary>
            Creates a new TextEditor instance.
            </summary>
        </member>
        <member name="F:ICSharpCode.AvalonEdit.TextEditor.DocumentProperty">
            <summary>
            Document property.
            </summary>
        </member>
        <member name="F:ICSharpCode.AvalonEdit.TextEditor.OptionsProperty">
            <summary>
            Options property.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.TextEditor.OnOptionChanged(System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Raises the <see cref="E:ICSharpCode.AvalonEdit.TextEditor.OptionChanged"/> event.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.TextEditor.ReceiveWeakEvent(System.Type,System.Object,System.EventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.TextEditor.OnApplyTemplate">
            <summary>
            Is called after the template was applied.
            </summary>
        </member>
        <member name="F:ICSharpCode.AvalonEdit.TextEditor.WordWrapProperty">
            <summary>
            Word wrap dependency property.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.TextEditor.AppendText(System.String)">
            <summary>
            Appends text to the end of the document.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.TextEditor.BeginChange">
            <summary>
            Begins a group of document changes.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.TextEditor.Copy">
            <summary>
            Copies the current selection to the clipboard.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.TextEditor.Cut">
            <summary>
            Removes the current selection and copies it to the clipboard.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.TextEditor.DeclareChangeBlock">
            <summary>
            Begins a group of document changes and returns an object that ends the group of document
            changes when it is disposed.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.TextEditor.EndChange">
            <summary>
            Ends the current group of document changes.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.TextEditor.LineDown">
            <summary>
            Scrolls one line down.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.TextEditor.LineLeft">
            <summary>
            Scrolls to the left.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.TextEditor.LineRight">
            <summary>
            Scrolls to the right.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.TextEditor.LineUp">
            <summary>
            Scrolls one line up.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.TextEditor.PageDown">
            <summary>
            Scrolls one page down.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.TextEditor.PageUp">
            <summary>
            Scrolls one page up.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.TextEditor.PageLeft">
            <summary>
            Scrolls one page left.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.TextEditor.PageRight">
            <summary>
            Scrolls one page right.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.TextEditor.Paste">
            <summary>
            Pastes the clipboard content.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.TextEditor.Redo">
            <summary>
            Redoes the most recent undone command.
            </summary>
            <returns>True is the redo operation was successful, false is the redo stack is empty.</returns>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.TextEditor.ScrollToEnd">
            <summary>
            Scrolls to the end of the document.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.TextEditor.ScrollToHome">
            <summary>
            Scrolls to the start of the document.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.TextEditor.ScrollToHorizontalOffset(System.Double)">
            <summary>
            Scrolls to the specified position in the document.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.TextEditor.ScrollToVerticalOffset(System.Double)">
            <summary>
            Scrolls to the specified position in the document.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.TextEditor.SelectAll">
            <summary>
            Selects the entire text.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.TextEditor.Undo">
            <summary>
            Undoes the most recent command.
            </summary>
            <returns>True is the undo operation was successful, false is the undo stack is empty.</returns>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.TextEditor.Select(System.Int32,System.Int32)">
            <summary>
            Selects the specified text section.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.TextEditor.Clear">
            <summary>
            Clears the text.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.TextEditor.Load(System.IO.Stream)">
            <summary>
            Loads the text from the stream, auto-detecting the encoding.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.TextEditor.Load(System.String)">
            <summary>
            Loads the text from the stream, auto-detecting the encoding.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.TextEditor.Save(System.IO.Stream)">
            <summary>
            Saves the text to the stream.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.TextEditor.Save(System.String)">
            <summary>
            Loads the text from the stream, auto-detecting the encoding.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.TextEditor.GetPositionFromPoint(System.Windows.Point)">
            <summary>
            Gets the text view position from a point inside the editor.
            </summary>
            <param name="p">The position, relative to top left
            corner of TextEditor control</param>
            <returns>The text view position, or null if the point is outside the document.</returns>
        </member>
        <member name="F:ICSharpCode.AvalonEdit.TextEditor.PreviewMouseHoverEvent">
            <summary>
            The PreviewMouseHover event.
            </summary>
        </member>
        <member name="F:ICSharpCode.AvalonEdit.TextEditor.MouseHoverEvent">
            <summary>
            The MouseHover event.
            </summary>
        </member>
        <member name="F:ICSharpCode.AvalonEdit.TextEditor.PreviewMouseHoverStoppedEvent">
            <summary>
            The PreviewMouseHoverStopped event.
            </summary>
        </member>
        <member name="F:ICSharpCode.AvalonEdit.TextEditor.MouseHoverStoppedEvent">
            <summary>
            The MouseHoverStopped event.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.TextEditor.Document">
            <summary>
            Gets/Sets the document displayed by the text editor.
            This is a dependency property.
            </summary>
        </member>
        <member name="E:ICSharpCode.AvalonEdit.TextEditor.DocumentChanged">
            <summary>
            Occurs when the document property has changed.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.TextEditor.Options">
            <summary>
            Gets/Sets the options currently used by the text editor.
            </summary>
        </member>
        <member name="E:ICSharpCode.AvalonEdit.TextEditor.OptionChanged">
            <summary>
            Occurs when a text editor option has changed.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.TextEditor.Text">
            <summary>
            Gets/Sets the text of the current document.
            </summary>
        </member>
        <member name="E:ICSharpCode.AvalonEdit.TextEditor.TextChanged">
            <summary>
            Occurs when the Text property changes.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.TextEditor.TextArea">
            <summary>
            Gets the text area.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.TextEditor.SyntaxHighlighting">
            <summary>
            Gets/sets the syntax highlighting definition used to colorize the text.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.TextEditor.WordWrap">
            <summary>
            Specifies whether the text editor uses word wrapping.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.TextEditor.CanRedo">
            <summary>
            Gets if the most recent undone command can be redone.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.TextEditor.CanUndo">
            <summary>
            Gets if the most recent command can be undone.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.TextEditor.ExtentHeight">
            <summary>
            Gets the vertical size of the document.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.TextEditor.ExtentWidth">
            <summary>
            Gets the horizontal size of the current document region.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.TextEditor.ViewportHeight">
            <summary>
            Gets the horizontal size of the viewport.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.TextEditor.ViewportWidth">
            <summary>
            Gets the horizontal size of the viewport.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.TextEditor.VerticalOffset">
            <summary>
            Gets the vertical scroll position.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.TextEditor.HorizontalOffset">
            <summary>
            Gets the horizontal scroll position.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.TextEditor.SelectedText">
            <summary>
            Gets/Sets the selected text.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.TextEditor.CaretOffset">
            <summary>
            Gets/sets the caret position.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.TextEditor.SelectionStart">
            <summary>
            Gets/sets the start position of the selection.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.TextEditor.SelectionLength">
            <summary>
            Gets/sets the length of the selection.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.TextEditor.LineCount">
            <summary>
            Gets the number of lines in the document.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.TextEditor.Encoding">
            <summary>
            Gets/sets the encoding used when the file is saved.
            </summary>
        </member>
        <member name="E:ICSharpCode.AvalonEdit.TextEditor.PreviewMouseHover">
            <summary>
            Occurs when the mouse has hovered over a fixed location for some time.
            </summary>
        </member>
        <member name="E:ICSharpCode.AvalonEdit.TextEditor.MouseHover">
            <summary>
            Occurs when the mouse has hovered over a fixed location for some time.
            </summary>
        </member>
        <member name="E:ICSharpCode.AvalonEdit.TextEditor.PreviewMouseHoverStopped">
            <summary>
            Occurs when the mouse had previously hovered but now started moving again.
            </summary>
        </member>
        <member name="E:ICSharpCode.AvalonEdit.TextEditor.MouseHoverStopped">
            <summary>
            Occurs when the mouse had previously hovered but now started moving again.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Gui.HeightTreeLineNode.TotalHeight">
            <summary>
            Returns 0 if the line is directly collapsed, otherwise, returns <see cref="F:ICSharpCode.AvalonEdit.Gui.HeightTreeLineNode.height"/>.
            </summary>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Gui.TextSegmentReadOnlySectionProvider`1">
            <summary>
            Implementation for <see cref="T:ICSharpCode.AvalonEdit.Gui.IReadOnlySectionProvider"/> that stores the segments
            in a <see cref="T:ICSharpCode.AvalonEdit.Document.TextSegmentCollection`1"/>.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Gui.TextSegmentReadOnlySectionProvider`1.#ctor(ICSharpCode.AvalonEdit.Document.TextDocument)">
            <summary>
            Creates a new TextSegmentReadOnlySectionProvider instance for the specified document.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Gui.TextSegmentReadOnlySectionProvider`1.#ctor(ICSharpCode.AvalonEdit.Document.TextSegmentCollection{`0})">
            <summary>
            Creates a new TextSegmentReadOnlySectionProvider instance for the specified document.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Gui.TextSegmentReadOnlySectionProvider`1.CanInsert(System.Int32)">
            <summary>
            Gets whether insertion is possible at the specified offset.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Gui.TextSegmentReadOnlySectionProvider`1.GetDeletableSegments(ICSharpCode.AvalonEdit.Document.ISegment)">
            <summary>
            Gets the deletable segments inside the given segment.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Gui.TextSegmentReadOnlySectionProvider`1.Segments">
            <summary>
            Gets the collection storing the read-only segments.
            </summary>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Gui.FoldingSection">
            <summary>
            A section that can be folded.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Gui.FoldingSection.Remove">
            <summary>
            Deletes the folding section.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Gui.FoldingSection.IsFolded">
            <summary>
            Gets/sets if the section is folded.
            </summary>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.TextEditorOptions">
            <summary>
            A container for the text editor options.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.TextEditorOptions.OnPropertyChanged(System.String)">
            <summary>
            Raises the PropertyChanged event.
            </summary>
            <param name="propertyName">The name of the changed property.</param>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.TextEditorOptions.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Raises the PropertyChanged event.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.TextEditorOptions.GetIndentationString(System.Int32)">
            <summary>
            Gets text required to indent from the specified <paramref name="column"/> to the next indentation level.
            </summary>
        </member>
        <member name="E:ICSharpCode.AvalonEdit.TextEditorOptions.PropertyChanged">
            <inheritdoc/>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.TextEditorOptions.ShowSpaces">
            <summary>
            Gets/Sets whether to show · for spaces.
            </summary>
            <remarks>The default value is <c>false</c>.</remarks>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.TextEditorOptions.ShowTabs">
            <summary>
            Gets/Sets whether to show » for tabs.
            </summary>
            <remarks>The default value is <c>false</c>.</remarks>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.TextEditorOptions.ShowBoxForControlCharacters">
            <summary>
            Gets/Sets whether to show a box with the hex code for control characters.
            </summary>
            <remarks>The default value is <c>true</c>.</remarks>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.TextEditorOptions.IndentationSize">
            <summary>
            Gets/Sets the width of one indentation unit.
            </summary>
            <remarks>The default value is 4.</remarks>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.TextEditorOptions.ConvertTabsToSpaces">
            <summary>
            Gets/Sets whether to use spaces for indentation instead of tabs.
            </summary>
            <remarks>The default value is <c>false</c>.</remarks>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.TextEditorOptions.IndentationString">
            <summary>
            Gets the text used for indentation.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.TextEditorOptions.CutCopyWholeLine">
            <summary>
            Gets/Sets whether copying without a selection copies the whole current line.
            </summary>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Gui.VisualLineText">
            <summary>
            VisualLineElement that represents a piece of text.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Gui.VisualLineText.#ctor(ICSharpCode.AvalonEdit.Gui.VisualLine,System.Int32)">
            <summary>
            Creates a visual line text element with the specified length.
            It uses the <see cref="P:ICSharpCode.AvalonEdit.Gui.ITextRunConstructionContext.VisualLine"/> and its
            <see cref="P:ICSharpCode.AvalonEdit.Gui.VisualLineElement.RelativeTextOffset"/> to find the actual text string.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Gui.VisualLineText.CreateInstance(System.Int32)">
            <summary>
            Override this method to control the type of new VisualLineText instances when
            the visual line is split due to syntax highlighting.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Gui.VisualLineText.CreateTextRun(System.Int32,ICSharpCode.AvalonEdit.Gui.ITextRunConstructionContext)">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Gui.VisualLineText.Split(System.Int32,System.Collections.Generic.IList{ICSharpCode.AvalonEdit.Gui.VisualLineElement},System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Gui.VisualLineText.GetRelativeOffset(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Gui.VisualLineText.GetVisualColumn(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Gui.VisualLineText.GetNextCaretPosition(System.Int32,System.Boolean,ICSharpCode.AvalonEdit.Gui.CaretPositioningMode)">
            <inheritdoc/>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Gui.VisualLineText.ParentVisualLine">
            <summary>
            Gets the parent visual line.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Gui.VisualLineText.CanSplit">
            <inheritdoc/>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Gui.AbstractMargin">
            <summary>
            Base class for margins.
            Margins don't have to derive from this class, it just helps maintaining a reference to the TextView
            and the TextDocument.
            AbstractMargin derives from FrameworkElement, so if you don't want to handle visual children and rendering
            on your own, choose another base class for your margin!
            </summary>
        </member>
        <member name="F:ICSharpCode.AvalonEdit.Gui.AbstractMargin.TextViewProperty">
            <summary>
            TextView property.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Gui.AbstractMargin.OnTextViewChanged(ICSharpCode.AvalonEdit.Gui.TextView,ICSharpCode.AvalonEdit.Gui.TextView)">
            <summary>
            Called when the <see cref="P:ICSharpCode.AvalonEdit.Gui.AbstractMargin.TextView"/> is changing.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Gui.AbstractMargin.OnDocumentChanged(ICSharpCode.AvalonEdit.Document.TextDocument,ICSharpCode.AvalonEdit.Document.TextDocument)">
            <summary>
            Called when the <see cref="P:ICSharpCode.AvalonEdit.Gui.AbstractMargin.Document"/> is changing.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Gui.AbstractMargin.TextView">
            <summary>
            Gets/sets the text view for which line numbers are displayed.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Gui.AbstractMargin.Document">
            <summary>
            Gets the document associated with the margin.
            </summary>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Highlighting.Xshd.V1Loader">
            <summary>
            Loads .xshd files, version 1.0.
            </summary>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Highlighting.HighlightingDefinitionInvalidException">
            <summary>
            Indicates that the highlighting definition that was tried to load was invalid.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Highlighting.HighlightingDefinitionInvalidException.#ctor">
            <summary>
            Creates a new HighlightingDefinitionInvalidException instance.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Highlighting.HighlightingDefinitionInvalidException.#ctor(System.String)">
            <summary>
            Creates a new HighlightingDefinitionInvalidException instance.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Highlighting.HighlightingDefinitionInvalidException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new HighlightingDefinitionInvalidException instance.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Highlighting.HighlightingDefinitionInvalidException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates a new HighlightingDefinitionInvalidException instance.
            </summary>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Gui.SingleCharacterElementGenerator">
            <summary>
            Element generator that displays · for spaces and » for tabs and a box for control characeters.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Gui.SingleCharacterElementGenerator.#ctor">
            <summary>
            Creates a new WhitespaceElementGenerator instance.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Gui.SingleCharacterElementGenerator.SynchronizeOptions(ICSharpCode.AvalonEdit.ITextEditorComponent)">
            <summary>
            Fetch options from the text editor and synchronize with future option changes.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Gui.SingleCharacterElementGenerator.ReceiveWeakEvent(System.Type,System.Object,System.EventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Gui.SingleCharacterElementGenerator.GetFirstInterestedOffset(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Gui.SingleCharacterElementGenerator.ConstructElement(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Gui.SingleCharacterElementGenerator.ShowSpaces">
            <summary>
            Gets/Sets whether to show · for spaces.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Gui.SingleCharacterElementGenerator.ShowTabs">
            <summary>
            Gets/Sets whether to show » for tabs.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Gui.SingleCharacterElementGenerator.ShowBoxForControlCharacters">
            <summary>
            Gets/Sets whether to show a box with the hex code for control characters.
            </summary>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Gui.FormattedTextRun">
            <summary>
            This is the TextRun implementation used by the <see cref="T:ICSharpCode.AvalonEdit.Gui.FormattedTextElement"/> class.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Gui.FormattedTextRun.#ctor(ICSharpCode.AvalonEdit.Gui.FormattedTextElement,System.Windows.Media.TextFormatting.TextRunProperties)">
            <summary>
            Creates a new FormattedTextRun.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Gui.FormattedTextRun.Format(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Gui.FormattedTextRun.ComputeBoundingBox(System.Boolean,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Gui.FormattedTextRun.Draw(System.Windows.Media.DrawingContext,System.Windows.Point,System.Boolean,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Gui.FormattedTextRun.Element">
            <summary>
            Gets the element for which the FormattedTextRun was created.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Gui.FormattedTextRun.BreakBefore">
            <inheritdoc/>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Gui.FormattedTextRun.BreakAfter">
            <inheritdoc/>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Gui.FormattedTextRun.HasFixedSize">
            <inheritdoc/>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Gui.FormattedTextRun.CharacterBufferReference">
            <inheritdoc/>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Gui.FormattedTextRun.Length">
            <inheritdoc/>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Gui.FormattedTextRun.Properties">
            <inheritdoc/>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.TextArea">
            <summary>
            Control that wraps a TextView and adds support for user input and the caret.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.TextArea.#ctor">
            <summary>
            Creates a new TextArea instance.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.TextArea.#ctor(ICSharpCode.AvalonEdit.Gui.TextView)">
            <summary>
            Creates a new TextArea instance.
            </summary>
        </member>
        <member name="F:ICSharpCode.AvalonEdit.TextArea.DocumentProperty">
            <summary>
            Document property.
            </summary>
        </member>
        <member name="F:ICSharpCode.AvalonEdit.TextArea.OptionsProperty">
            <summary>
            Options property.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.TextArea.OnOptionChanged(System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Raises the <see cref="E:ICSharpCode.AvalonEdit.TextArea.OptionChanged"/> event.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.TextArea.ReceiveWeakEvent(System.Type,System.Object,System.EventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.TextArea.OnApplyTemplate">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.TextArea.EnsureSelectionValid">
            <summary>
            Code that updates only the caret but not the selection can cause confusion when
            keys like 'Delete' delete the (possibly invisible) selected text and not the
            text around the caret (where the will jump to).
            
            So we'll ensure that the caret is inside the selection.
            (when the caret is not in the selection, we'll clear the selection)
            
            This method is invoked using the Dispatcher so that code may temporarily violate this rule
            (e.g. most 'exten selection' methods work by first setting the caret, then the selection),
            it's sufficient to fix it after any event handlers have run.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.TextArea.AllowCaretOutsideSelection">
            <summary>
            Temporarily allows positioning the caret outside the selection.
            Dispose the returned IDisposable to revert the allowance.
            </summary>
            <remarks>
            The text area only forces the caret to be inside the selection when other events
            have finished running (using the dispatcher), so you don't have to use this method
            for temporarily positioning the caret in event handlers.
            This method is only necessary if you want to run the WPF dispatcher, e.g. if you
            perform a drag'n'drop operation.
            </remarks>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.TextArea.OnMouseDown(System.Windows.Input.MouseButtonEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.TextArea.OnGotKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.TextArea.OnLostKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.TextArea.OnTextEntered(System.Windows.Input.TextCompositionEventArgs)">
            <summary>
            Raises the TextEntered event.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.TextArea.OnTextInput(System.Windows.Input.TextCompositionEventArgs)">
            <inheritdoc/>
        </member>
        <member name="F:ICSharpCode.AvalonEdit.TextArea.IndentationStrategyProperty">
            <summary>
            IndentationStrategy property.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.TextArea.GetService(System.Type)">
            <summary>
            Gets the requested service.
            </summary>
            <returns>Returns the requested service instance, or null if the service cannot be found.</returns>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.TextArea.DefaultInputHandler">
            <summary>
            Gets the default input handler.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.TextArea.ActiveInputHandler">
            <summary>
            Gets/Sets the active input handler.
            </summary>
        </member>
        <member name="E:ICSharpCode.AvalonEdit.TextArea.ActiveInputHandlerChanged">
            <summary>
            Occurs when the ActiveInputHandler property changes.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.TextArea.Document">
            <summary>
            Gets/Sets the document displayed by the text editor.
            </summary>
        </member>
        <member name="E:ICSharpCode.AvalonEdit.TextArea.DocumentChanged">
            <inheritdoc/>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.TextArea.Options">
            <summary>
            Gets/Sets the document displayed by the text editor.
            </summary>
        </member>
        <member name="E:ICSharpCode.AvalonEdit.TextArea.OptionChanged">
            <summary>
            Occurs when a text editor option has changed.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.TextArea.TextView">
            <summary>
            Gets the text view used to display text in this text area.
            </summary>
        </member>
        <member name="E:ICSharpCode.AvalonEdit.TextArea.SelectionChanged">
            <summary>
            Occurs when the selection has changed.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.TextArea.Selection">
            <summary>
            Gets/Sets the selection in this text area.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.TextArea.Caret">
            <summary>
            Gets the Caret used for this text area.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.TextArea.LeftMargins">
            <summary>
            Gets the collection of margins displayed to the left of the text view.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.TextArea.ReadOnlySectionProvider">
            <summary>
            Gets/Sets an object that provides read-only sections for the text area.
            </summary>
        </member>
        <member name="E:ICSharpCode.AvalonEdit.TextArea.TextEntered">
            <summary>
            Occurs when the TextArea receives text input.
            This is like the <see cref="E:System.Windows.UIElement.TextInput"/> event,
            but occurs immediately before the TextArea handles the TextInput event.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.TextArea.IndentationStrategy">
            <summary>
            Gets/Sets the indentation strategy used when inserting new lines.
            </summary>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Gui.FoldingElementGenerator">
            <summary>
            A <see cref="T:ICSharpCode.AvalonEdit.Gui.VisualLineElementGenerator"/> that produces line elements for folded <see cref="T:ICSharpCode.AvalonEdit.Gui.FoldingSection"/>s.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Gui.FoldingElementGenerator.StartGeneration(ICSharpCode.AvalonEdit.Gui.ITextRunConstructionContext)">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Gui.FoldingElementGenerator.GetFirstInterestedOffset(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Gui.FoldingElementGenerator.ConstructElement(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Gui.FoldingElementGenerator.FoldingManager">
            <summary>
            Gets/Sets the folding manager from which the foldings should be shown.
            </summary>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Utils.Empty`1">
            <summary>
            Provides immutable empty list instances.
            </summary>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Utils.DelayedEvents">
            <summary>
            Maintains a list of delayed events to raise.
            </summary>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Gui.Layer">
            <summary>
            Base class for known layers.
            </summary>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Gui.EditingCommandHandler">
            <summary>
            We re-use the CommandBinding and InputBinding instances between multiple text areas,
            so this class is static.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Gui.EditingCommandHandler.Create(ICSharpCode.AvalonEdit.TextArea)">
            <summary>
            Creates a new <see cref="T:ICSharpCode.AvalonEdit.Gui.TextAreaInputHandler"/> for the text area.
            </summary>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Gui.CaretPositioningMode">
            <summary>
            Specifies the mode for getting the next caret position.
            </summary>
        </member>
        <member name="F:ICSharpCode.AvalonEdit.Gui.CaretPositioningMode.Normal">
            <summary>
            Normal positioning (stop at every caret position)
            </summary>
        </member>
        <member name="F:ICSharpCode.AvalonEdit.Gui.CaretPositioningMode.WordBorder">
            <summary>
            Stop only on word borders.
            </summary>
        </member>
        <member name="F:ICSharpCode.AvalonEdit.Gui.CaretPositioningMode.WordStart">
            <summary>
            Stop only at the beginning of words. This is used for Ctrl+Left/Ctrl+Right.
            </summary>
        </member>
        <member name="F:ICSharpCode.AvalonEdit.Gui.CaretPositioningMode.WordStartOrSymbol">
            <summary>
            Stop only at the beginning of words, and anywhere in the middle of symbols.
            </summary>
        </member>
        <member name="F:ICSharpCode.AvalonEdit.Gui.CaretPositioningMode.WordBorderOrSymbol">
            <summary>
            Stop only on word borders, and anywhere in the middle of symbols.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Gui.CaretNavigationCommandHandler.Create(ICSharpCode.AvalonEdit.TextArea)">
            <summary>
            Creates a new <see cref="T:ICSharpCode.AvalonEdit.Gui.TextAreaInputHandler"/> for the text area.
            </summary>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Document.DocumentChangeOperation">
            <summary>
            Describes a change to a TextDocument.
            </summary>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Utils.ThrowUtil">
            <summary>
            Contains exception-throwing helper methods.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Utils.ThrowUtil.CheckNull``1(``0,System.String)">
            <summary>
            Throws an ArgumentNullException if <paramref name="val"/> is null; otherwise
            returns val.
            </summary>
            <example>
            Use this method to throw an ArgumentNullException when using parameters for base
            constructor calls.
            <code>
            public VisualLineText(string text) : base(ThrowUtil.CheckNull(text, "text").Length)
            </code>
            </example>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Utils.TextUtilities">
            <summary>
            Static helper methods for working with text.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Utils.TextUtilities.GetControlCharacterName(System.Char)">
            <summary>
            Gets the name of the control character.
            For unknown characters, the unicode codepoint is returned as 4-digit hexadecimal value.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Utils.TextUtilities.GetIndentation(ICSharpCode.AvalonEdit.Document.ITextSource,System.Int32)">
            <summary>
            Gets all indentation starting at offset.
            </summary>
            <param name="textSource">The text source.</param>
            <param name="offset">The offset where the indentation starts.</param>
            <returns>The segment containing the indentation.</returns>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Utils.TextUtilities.GetSingleIndentationSegment(ICSharpCode.AvalonEdit.Document.ITextSource,System.Int32,System.Int32)">
            <summary>
            Gets a single indentation segment starting at <paramref name="offset"/> - at most one tab
            or <paramref name="indentationSize"/> spaces.
            </summary>
            <param name="textSource">The text source.</param>
            <param name="offset">The offset where the indentation segment starts.</param>
            <param name="indentationSize">The size of an indentation unit. See <see cref="P:ICSharpCode.AvalonEdit.TextEditorOptions.IndentationSize"/>.</param>
            <returns>The indentation segment.
            If there is no indentation character at the specified <paramref name="offset"/>,
            an empty segment is returned.</returns>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Utils.TextUtilities.GetCharacterClass(System.Char)">
            <summary>
            Gets whether the character is whitespace, part of an identifier, or line terminator.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Utils.TextUtilities.GetNextCaretPosition(ICSharpCode.AvalonEdit.Document.ITextSource,System.Int32,System.Boolean,ICSharpCode.AvalonEdit.Gui.CaretPositioningMode)">
            <summary>
            Gets the next caret position.
            </summary>
            <param name="textSource">The text source.</param>
            <param name="offset">The start offset inside the text source.</param>
            <param name="backwards">True to look backwards, false to look forwards.</param>
            <param name="mode">The mode for caret positioning.</param>
            <returns>The offset of the next caret position, or -1 if there is no further caret position
            in the text source.</returns>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Utils.CharacterClass">
            <summary>
            Classifies a character as whitespace, line terminator, part of an identifier, or other.
            </summary>
        </member>
        <member name="F:ICSharpCode.AvalonEdit.Utils.CharacterClass.Other">
            <summary>
            The character is not whitespace, line terminator or part of an identifier.
            </summary>
        </member>
        <member name="F:ICSharpCode.AvalonEdit.Utils.CharacterClass.Whitespace">
            <summary>
            The character is whitespace (but not line terminator).
            </summary>
        </member>
        <member name="F:ICSharpCode.AvalonEdit.Utils.CharacterClass.IdentifierPart">
            <summary>
            The character can be part of an identifier (Letter, digit or underscore).
            </summary>
        </member>
        <member name="F:ICSharpCode.AvalonEdit.Utils.CharacterClass.LineTerminator">
            <summary>
            The character is line terminator (\r or \n).
            </summary>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Utils.Boxes">
            <summary>
            Reuse the same instances for boxed booleans.
            </summary>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Gui.TextView">
            <summary>
            A virtualizing panel producing+showing <see cref="T:ICSharpCode.AvalonEdit.Gui.VisualLine"/>s for a <see cref="T:ICSharpCode.AvalonEdit.Document.TextDocument"/>.
            
            This is the heart of the text editor, this class controls the text rendering process.
            
            Taken as a standalone control, it's a text viewer without any editing capability.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Gui.TextView.#ctor">
            <summary>
            Creates a new TextView instance.
            </summary>
        </member>
        <member name="F:ICSharpCode.AvalonEdit.Gui.TextView.DocumentProperty">
            <summary>
            Document property.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Gui.TextView.ReceiveWeakEvent(System.Type,System.Object,System.EventArgs)">
            <inheritdoc/>
        </member>
        <member name="F:ICSharpCode.AvalonEdit.Gui.TextView.OptionsProperty">
            <summary>
            Options property.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Gui.TextView.OnOptionChanged(System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Raises the <see cref="E:ICSharpCode.AvalonEdit.Gui.TextView.OptionChanged"/> event.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Gui.TextView.InsertLayer(System.Windows.UIElement,ICSharpCode.AvalonEdit.Gui.KnownLayer,ICSharpCode.AvalonEdit.Gui.LayerInsertionPosition)">
            <summary>
            Inserts a new layer at a position specified relative to an existing layer.
            </summary>
            <param name="layer">The new layer to insert.</param>
            <param name="referencedLayer">The existing layer</param>
            <param name="position">Specifies whether</param>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Gui.TextView.GetVisualChild(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Gui.TextView.Redraw">
            <summary>
            Causes the text editor to regenerate all visual lines.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Gui.TextView.Redraw(System.Windows.Threading.DispatcherPriority)">
            <summary>
            Causes the text editor to regenerate all visual lines.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Gui.TextView.Redraw(ICSharpCode.AvalonEdit.Gui.VisualLine,System.Windows.Threading.DispatcherPriority)">
            <summary>
            Causes the text editor to regenerate the specified visual line.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Gui.TextView.Redraw(System.Int32,System.Int32,System.Windows.Threading.DispatcherPriority)">
            <summary>
            Causes the text editor to redraw all lines overlapping with the specified segment.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Gui.TextView.Redraw(ICSharpCode.AvalonEdit.Document.ISegment,System.Windows.Threading.DispatcherPriority)">
            <summary>
            Causes the text editor to redraw all lines overlapping with the specified segment.
            Does nothing if segment is null.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Gui.TextView.ClearVisualLines">
            <summary>
            Invalidates all visual lines.
            The caller of ClearVisualLines() must also call InvalidateMeasure() to ensure
            that the visual lines will be recreated.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Gui.TextView.GetVisualLine(System.Int32)">
            <summary>
            Gets the visual line that contains the document line with the specified number.
            Returns null if the document line is outside the visible range.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Gui.TextView.GetOrConstructVisualLine(ICSharpCode.AvalonEdit.Document.DocumentLine)">
            <summary>
            Gets the visual line that contains the document line with the specified number.
            If that line is outside the visible range, a new VisualLine for that document line is constructed.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Gui.TextView.EnsureVisualLines">
            <summary>
            If the visual lines are invalid, creates new visual lines for the visible part
            of the document.
            If all visual lines are valid, this method does nothing.
            </summary>
            <exception cref="T:System.InvalidOperationException">The visual line build process is already running.
            It is not allowed to call this method during the construction of a visual line.</exception>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Gui.TextView.MeasureOverride(System.Windows.Size)">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Gui.TextView.CreateAndMeasureVisualLines(System.Windows.Size)">
            <summary>
            Build all VisualLines in the visible range.
            </summary>
            <returns>Width the longest line</returns>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Gui.TextView.ArrangeOverride(System.Windows.Size)">
            <summary>
            Arrange implementation.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Gui.TextView.OnRender(System.Windows.Media.DrawingContext)">
            <inheritdoc/>
        </member>
        <member name="F:ICSharpCode.AvalonEdit.Gui.TextView.scrollExtent">
            <summary>
            Size of the document, in pixels.
            </summary>
        </member>
        <member name="F:ICSharpCode.AvalonEdit.Gui.TextView.scrollOffset">
            <summary>
            Offset of the scroll position.
            </summary>
        </member>
        <member name="F:ICSharpCode.AvalonEdit.Gui.TextView.scrollViewport">
            <summary>
            Size of the viewport.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Gui.TextView.MakeVisible(System.Windows.Rect)">
            <summary>
            Scrolls the text view so that the specified rectangle gets visible.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Gui.TextView.HitTestCore(System.Windows.Media.PointHitTestParameters)">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Gui.TextView.InvalidateCursor">
            <summary>
            Updates the mouse cursor by calling <see cref="M:System.Windows.Input.Mouse.UpdateCursor"/>, but with input priority.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Gui.TextView.OnQueryCursor(System.Windows.Input.QueryCursorEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Gui.TextView.OnMouseDown(System.Windows.Input.MouseButtonEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Gui.TextView.OnMouseUp(System.Windows.Input.MouseButtonEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Gui.TextView.GetVisualLineFromVisualTop(System.Double)">
            <summary>
            Gets the visual line at the specified document position (relative to start of document).
            Returns null if there is no visual line for the position (e.g. the position is outside the visible
            text area).
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Gui.TextView.GetVisualPosition(ICSharpCode.AvalonEdit.Gui.TextViewPosition,ICSharpCode.AvalonEdit.Gui.VisualYPosition)">
            <summary>
            Gets the visual position from a text view position.
            </summary>
            <param name="position">The text view position.</param>
            <param name="yPositionMode">The mode how to retrieve the Y position.</param>
            <returns>The position in WPF device-independent pixels relative
            to the top left corner of the document.</returns>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Gui.TextView.GetPosition(System.Windows.Point)">
            <summary>
            Gets the text view position from the specified visual position.
            </summary>
            <param name="visualPosition">The position in WPF device-independent pixels relative
            to the top left corner of the document.</param>
            <returns>The logical position, or null if the position is outside the document.</returns>
        </member>
        <member name="F:ICSharpCode.AvalonEdit.Gui.TextView.PreviewMouseHoverEvent">
            <summary>
            The PreviewMouseHover event.
            </summary>
        </member>
        <member name="F:ICSharpCode.AvalonEdit.Gui.TextView.MouseHoverEvent">
            <summary>
            The MouseHover event.
            </summary>
        </member>
        <member name="F:ICSharpCode.AvalonEdit.Gui.TextView.PreviewMouseHoverStoppedEvent">
            <summary>
            The PreviewMouseHoverStopped event.
            </summary>
        </member>
        <member name="F:ICSharpCode.AvalonEdit.Gui.TextView.MouseHoverStoppedEvent">
            <summary>
            The MouseHoverStopped event.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Gui.TextView.OnMouseMove(System.Windows.Input.MouseEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Gui.TextView.OnMouseLeave(System.Windows.Input.MouseEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Gui.TextView.CollapseLines(ICSharpCode.AvalonEdit.Document.DocumentLine,ICSharpCode.AvalonEdit.Document.DocumentLine)">
            <summary>
            Collapses lines for the purpose of scrolling. This method is meant for
            <see cref="T:ICSharpCode.AvalonEdit.Gui.VisualLineElementGenerator"/>s that cause <see cref="T:ICSharpCode.AvalonEdit.Gui.VisualLine"/>s to span
            multiple <see cref="T:ICSharpCode.AvalonEdit.Document.DocumentLine"/>s. Do not call it without providing a corresponding
            <see cref="T:ICSharpCode.AvalonEdit.Gui.VisualLineElementGenerator"/>.
            If you want to create collapsible text sections, see <see cref="T:ICSharpCode.AvalonEdit.Gui.FoldingManager"/>.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Gui.TextView.GetDocumentLineByVisualTop(System.Double)">
            <summary>
            Gets the document line at the specified visual position.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Gui.TextView.Document">
            <summary>
            Gets/Sets the document displayed by the text editor.
            </summary>
        </member>
        <member name="E:ICSharpCode.AvalonEdit.Gui.TextView.DocumentChanged">
            <summary>
            Occurs when the document property has changed.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Gui.TextView.Options">
            <summary>
            Gets/Sets the document displayed by the text editor.
            </summary>
        </member>
        <member name="E:ICSharpCode.AvalonEdit.Gui.TextView.OptionChanged">
            <summary>
            Occurs when a text editor option has changed.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Gui.TextView.ElementGenerators">
            <summary>
            Gets a collection where element generators can be registered.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Gui.TextView.LineTransformers">
            <summary>
            Gets a collection where line transformers can be registered.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Gui.TextView.Layers">
            <summary>
            Gets the list of layers displayed in the text view.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Gui.TextView.VisualChildrenCount">
            <inheritdoc/>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Gui.TextView.VisualLines">
            <summary>
            Gets the currently visible visual lines.
            </summary>
            <exception cref="T:ICSharpCode.AvalonEdit.Gui.VisualLinesInvalidException">
            Gets thrown if there are invalid visual lines when this property is accessed.
            You can use the <see cref="P:ICSharpCode.AvalonEdit.Gui.TextView.VisualLinesValid"/> property to check for this case,
            or use the <see cref="M:ICSharpCode.AvalonEdit.Gui.TextView.EnsureVisualLines"/> method to force creating the visual lines
            when they are invalid.
            </exception>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Gui.TextView.VisualLinesValid">
            <summary>
            Gets whether the visual lines are valid.
            Will return false after a call to Redraw(). Accessing the visual lines property
            will force immediate regeneration of valid lines.
            </summary>
        </member>
        <member name="E:ICSharpCode.AvalonEdit.Gui.TextView.VisualLinesChanged">
            <summary>
            Occurs when the TextView was measured and changed its visual lines.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Gui.TextView.BackgroundRenderers">
            <summary>
            Gets the list of background renderers.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Gui.TextView.HorizontalOffset">
            <summary>
            Gets the horizontal scroll offset.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Gui.TextView.VerticalOffset">
            <summary>
            Gets the vertical scroll offset.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Gui.TextView.ScrollOffset">
            <summary>
            Gets the scroll offset;
            </summary>
        </member>
        <member name="E:ICSharpCode.AvalonEdit.Gui.TextView.ScrollOffsetChanged">
            <summary>
            Occurs when the scroll offset has changed.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Gui.TextView.Services">
            <summary>
            Gets a service container used to associate services with the text view.
            </summary>
        </member>
        <member name="E:ICSharpCode.AvalonEdit.Gui.TextView.PreviewMouseHover">
            <summary>
            Occurs when the mouse has hovered over a fixed location for some time.
            </summary>
        </member>
        <member name="E:ICSharpCode.AvalonEdit.Gui.TextView.MouseHover">
            <summary>
            Occurs when the mouse has hovered over a fixed location for some time.
            </summary>
        </member>
        <member name="E:ICSharpCode.AvalonEdit.Gui.TextView.PreviewMouseHoverStopped">
            <summary>
            Occurs when the mouse had previously hovered but now started moving again.
            </summary>
        </member>
        <member name="E:ICSharpCode.AvalonEdit.Gui.TextView.MouseHoverStopped">
            <summary>
            Occurs when the mouse had previously hovered but now started moving again.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Gui.TextView.DocumentHeight">
            <summary>
            Gets the height of the document.
            </summary>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Gui.LineNumberMargin">
            <summary>
            Margin showing line numbers.
            </summary>
        </member>
        <member name="F:ICSharpCode.AvalonEdit.Gui.LineNumberMargin.TextAreaProperty">
            <summary>
            TextArea property.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Gui.LineNumberMargin.MeasureOverride(System.Windows.Size)">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Gui.LineNumberMargin.OnRender(System.Windows.Media.DrawingContext)">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Gui.LineNumberMargin.OnTextViewChanged(ICSharpCode.AvalonEdit.Gui.TextView,ICSharpCode.AvalonEdit.Gui.TextView)">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Gui.LineNumberMargin.OnDocumentChanged(ICSharpCode.AvalonEdit.Document.TextDocument,ICSharpCode.AvalonEdit.Document.TextDocument)">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Gui.LineNumberMargin.ReceiveWeakEvent(System.Type,System.Object,System.EventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Gui.LineNumberMargin.OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Gui.LineNumberMargin.OnMouseMove(System.Windows.Input.MouseEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Gui.LineNumberMargin.OnMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Gui.LineNumberMargin.HitTestCore(System.Windows.Media.PointHitTestParameters)">
            <inheritdoc/>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Gui.LineNumberMargin.TextArea">
            <summary>
            Gets/sets the text area in which text should be selected.
            </summary>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Document.UndoStack">
            <summary>
            Undo stack implementation.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.UndoStack.StartUndoGroup">
            <summary>
            Starts grouping changes.
            Maintains a counter so that nested calls are possible.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.UndoStack.StartUndoGroup(System.Object)">
            <summary>
            Starts grouping changes.
            Maintains a counter so that nested calls are possible.
            </summary>
            <param name="groupDescriptor">An object that is stored with the undo group.
            If this is not a top-level undo group, the parameter is ignored.</param>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.UndoStack.StartContinuedUndoGroup(System.Object)">
            <summary>
            Starts grouping changes, continuing with the previously closed undo group.
            Maintains a counter so that nested calls are possible.
            If the call to StartContinuedUndoGroup is a nested call, it behaves exactly
            as <see cref="M:ICSharpCode.AvalonEdit.Document.UndoStack.StartUndoGroup"/>, only top-level calls can continue existing undo groups.
            </summary>
            <param name="groupDescriptor">An object that is stored with the undo group.
            If this is not a top-level undo group, the parameter is ignored.</param>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.UndoStack.EndUndoGroup">
            <summary>
            Stops grouping changes.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.UndoStack.VerifyNoUndoGroupOpen">
            <summary>
            Throws an InvalidOperationException if an undo group is current open.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.UndoStack.Undo">
            <summary>
            Call this method to undo the last operation on the stack
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.UndoStack.Redo">
            <summary>
            Call this method to redo the last undone operation
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.UndoStack.Push(ICSharpCode.AvalonEdit.Document.IUndoableOperation)">
            <summary>
            Call this method to push an UndoableOperation on the undostack.
            The redostack will be cleared if you use this method.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.UndoStack.PushOptional(ICSharpCode.AvalonEdit.Document.IUndoableOperation)">
            <summary>
            Call this method to push an UndoableOperation on the undostack.
            However, the operation will be only stored if the undo group contains a
            non-optional operation.
            Use this method to store the caret position/selection on the undo stack to
            prevent having only actions that affect only the caret and not the document.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.UndoStack.ClearRedoStack">
            <summary>
            Call this method, if you want to clear the redo stack
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.UndoStack.ClearAll">
            <summary>
            Clears both the undo and redo stack.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Document.UndoStack.AcceptChanges">
            <summary>
            Gets if the undo stack currently accepts changes.
            Is false while an undo action is running.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Document.UndoStack.CanUndo">
            <summary>
            Gets if there are actions on the undo stack.
            Use the PropertyChanged event to listen to changes of this property.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Document.UndoStack.CanRedo">
            <summary>
            Gets if there are actions on the redo stack.
            Use the PropertyChanged event to listen to changes of this property.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Document.UndoStack.LastGroupDescriptor">
            <summary>
            If an undo group is open, gets the group descriptor of the current top-level
            undo group.
            If no undo group is open, gets the group descriptor from the previous undo group.
            </summary>
            <remarks>The group descriptor can be used to join adjacent undo groups:
            use a group descriptor to mark your changes, and on the second action,
            compare LastGroupDescriptor and use <see cref="M:ICSharpCode.AvalonEdit.Document.UndoStack.StartContinuedUndoGroup(System.Object)"/> if you
            want to join the undo groups.</remarks>
        </member>
        <member name="E:ICSharpCode.AvalonEdit.Document.UndoStack.PropertyChanged">
            <summary>
            Is raised when a property (CanUndo, CanRedo) changed.
            </summary>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Utils.NullSafeCollection`1">
            <summary>
            A collection that cannot contain null values.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Utils.NullSafeCollection`1.InsertItem(System.Int32,`0)">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Utils.NullSafeCollection`1.SetItem(System.Int32,`0)">
            <inheritdoc/>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Document.DocumentLineTree">
            <summary>
            Data structure for efficient management of the document lines (most operations are O(lg n)).
            This implements an augmented red-black tree.
            See <see cref="T:ICSharpCode.AvalonEdit.Document.DocumentLine"/> for the augmented data.
            
            NOTE: The tree is never empty, initially it contains an empty line.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.DocumentLineTree.RebuildTree(System.Collections.Generic.List{ICSharpCode.AvalonEdit.Document.DocumentLine})">
            <summary>
            Rebuild the tree, in O(n).
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.DocumentLineTree.BuildTree(ICSharpCode.AvalonEdit.Document.DocumentLine[],System.Int32,System.Int32,System.Int32)">
            <summary>
            build a tree from a list of nodes
            </summary>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Highlighting.Xshd.XshdReference`1">
            <summary>
            A reference to an xshd color, or an inline xshd color.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Highlighting.Xshd.XshdReference`1.#ctor(System.String,System.String)">
            <summary>
            Creates a new XshdReference instance.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Highlighting.Xshd.XshdReference`1.#ctor(`0)">
            <summary>
            Creates a new XshdReference instance.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Highlighting.Xshd.XshdReference`1.AcceptVisitor(ICSharpCode.AvalonEdit.Highlighting.Xshd.IXshdVisitor)">
            <summary>
            Applies the visitor to the inline element, if there is any.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Highlighting.Xshd.XshdReference`1.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Highlighting.Xshd.XshdReference`1.Equals(ICSharpCode.AvalonEdit.Highlighting.Xshd.XshdReference{`0})">
            <summary>
            Equality operator.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Highlighting.Xshd.XshdReference`1.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Highlighting.Xshd.XshdReference`1.op_Equality(ICSharpCode.AvalonEdit.Highlighting.Xshd.XshdReference{`0},ICSharpCode.AvalonEdit.Highlighting.Xshd.XshdReference{`0})">
            <summary>
            Equality operator.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Highlighting.Xshd.XshdReference`1.op_Inequality(ICSharpCode.AvalonEdit.Highlighting.Xshd.XshdReference{`0},ICSharpCode.AvalonEdit.Highlighting.Xshd.XshdReference{`0})">
            <summary>
            Inequality operator.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Highlighting.Xshd.XshdReference`1.ReferencedDefinition">
            <summary>
            Gets the reference.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Highlighting.Xshd.XshdReference`1.ReferencedElement">
            <summary>
            Gets the reference.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Highlighting.Xshd.XshdReference`1.InlineElement">
            <summary>
            Gets the inline element.
            </summary>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Highlighting.HighlightedLine">
            <summary>
            Represents a highlighted document line.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Highlighting.HighlightedLine.#ctor(ICSharpCode.AvalonEdit.Document.DocumentLine)">
            <summary>
            Creates a new HighlightedLine instance.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Highlighting.HighlightedLine.ToHtml(ICSharpCode.AvalonEdit.Utils.HtmlOptions)">
            <summary>
            Produces HTML code for the line, with &lt;span class="colorName"&gt; tags.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Highlighting.HighlightedLine.ToHtml(System.Int32,System.Int32,ICSharpCode.AvalonEdit.Utils.HtmlOptions)">
            <summary>
            Produces HTML code for a section of the line, with &lt;span class="colorName"&gt; tags.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Highlighting.HighlightedLine.ToString">
            <inheritdoc/>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Highlighting.HighlightedLine.DocumentLine">
            <summary>
            Gets/Sets the document line associated with this HighlightedLine.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Highlighting.HighlightedLine.Sections">
            <summary>
            Gets the highlighted sections.
            The sections are not overlapping, but they may be nested.
            In that case, outer sections come in the list before inner sections.
            The sections are sorted by start offset.
            </summary>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Gui.InlineObjectElement">
            <summary>
            A inline UIElement in the document.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Gui.InlineObjectElement.#ctor(System.Int32,System.Windows.UIElement)">
            <summary>
            Creates a new InlineObjectElement.
            </summary>
            <param name="documentLength">The length of the element in the document. Must be non-negative.</param>
            <param name="element">The element to display.</param>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Gui.InlineObjectElement.CreateTextRun(System.Int32,ICSharpCode.AvalonEdit.Gui.ITextRunConstructionContext)">
            <inheritdoc/>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Gui.InlineObjectElement.Element">
            <summary>
            Gets the inline element that is displayed.
            </summary>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Gui.InlineObjectRun">
            <summary>
            A text run with an embedded UIElement.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Gui.InlineObjectRun.#ctor(System.Int32,System.Windows.Media.TextFormatting.TextRunProperties,System.Windows.UIElement)">
            <summary>
            Creates a new InlineObjectRun instance.
            </summary>
            <param name="length">The length of the TextRun.</param>
            <param name="properties">The <see cref="T:System.Windows.Media.TextFormatting.TextRunProperties"/> to use.</param>
            <param name="element">The <see cref="T:System.Windows.UIElement"/> to display.</param>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Gui.InlineObjectRun.Format(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Gui.InlineObjectRun.ComputeBoundingBox(System.Boolean,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Gui.InlineObjectRun.Draw(System.Windows.Media.DrawingContext,System.Windows.Point,System.Boolean,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Gui.InlineObjectRun.Element">
            <summary>
            Gets the element displayed by the InlineObjectRun.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Gui.InlineObjectRun.VisualLine">
            <summary>
            Gets the VisualLine that contains this object. This property is only available after the object
            was added to the text view.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Gui.InlineObjectRun.BreakBefore">
            <inheritdoc/>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Gui.InlineObjectRun.BreakAfter">
            <inheritdoc/>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Gui.InlineObjectRun.HasFixedSize">
            <inheritdoc/>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Gui.InlineObjectRun.CharacterBufferReference">
            <inheritdoc/>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Gui.InlineObjectRun.Length">
            <inheritdoc/>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Gui.InlineObjectRun.Properties">
            <inheritdoc/>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Gui.TextLayer">
            <summary>
            The control that contains the text.
            
            This control is used to allow other UIElements to be placed inside the TextView but
            behind the text.
            The text rendering process (VisualLine creation) is controlled by the TextView, this
            class simply displays the created Visual Lines.
            </summary>
            <remarks>
            This class does not contain any input handling and is invisible to hit testing. Input
            is handled by the TextView.
            This allows UIElements that are displayed behind the text, but still can react to mouse input.
            </remarks>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Gui.TextLayer.AddInlineObject(ICSharpCode.AvalonEdit.Gui.InlineObjectRun)">
            <summary>
            Adds a new inline object.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Gui.TextLayer.RemoveInlineObject(System.Windows.UIElement)">
            <summary>
            Removes the inline object that displays the specified UIElement.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Gui.TextLayer.GetVisualChild(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Gui.TextLayer.VisualChildrenCount">
            <inheritdoc/>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.TextEditorWeakEventManager">
            <summary>
            Contains weak event managers for <see cref="T:ICSharpCode.AvalonEdit.ITextEditorComponent"/>.
            </summary>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.TextEditorWeakEventManager.DocumentChanged">
            <summary>
            Weak event manager for the <see cref="E:ICSharpCode.AvalonEdit.ITextEditorComponent.DocumentChanged"/> event.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.TextEditorWeakEventManager.DocumentChanged.StartListening(ICSharpCode.AvalonEdit.ITextEditorComponent)">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.TextEditorWeakEventManager.DocumentChanged.StopListening(ICSharpCode.AvalonEdit.ITextEditorComponent)">
            <inheritdoc/>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.TextEditorWeakEventManager.OptionChanged">
            <summary>
            Weak event manager for the <see cref="E:ICSharpCode.AvalonEdit.ITextEditorComponent.OptionChanged"/> event.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.TextEditorWeakEventManager.OptionChanged.StartListening(ICSharpCode.AvalonEdit.ITextEditorComponent)">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.TextEditorWeakEventManager.OptionChanged.StopListening(ICSharpCode.AvalonEdit.ITextEditorComponent)">
            <inheritdoc/>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Gui.IBackgroundRenderer">
            <summary>
            Background renderers draw in the background of a known layer.
            You can use background renderers to draw non-interactive elements on the TextView
            without introducing new UIElements.
            </summary>
            <remarks>Background renderer will draw only if their associated known
            layer chooses to draw them. For example, background renderers in the caret
            layer will be invisible when the caret is hidden.</remarks>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Gui.IBackgroundRenderer.Draw(System.Windows.Media.DrawingContext)">
            <summary>
            Causes the background renderer to draw.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Gui.IBackgroundRenderer.Layer">
            <summary>
            Gets the layer on which this background renderer should draw.
            </summary>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Gui.Caret">
            <summary>
            Helper class with caret-related methods.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Gui.Caret.RevalidateVisualColumn(ICSharpCode.AvalonEdit.Gui.VisualLine)">
            <summary>
            Validates the visual column of the caret using the specified visual line.
            The visual line must contain the caret offset.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Gui.Caret.BringCaretToView">
            <summary>
            Scrolls the text view so that the caret is visible.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Gui.Caret.Show">
            <summary>
            Makes the caret visible and updates its on-screen position.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Gui.Caret.Hide">
            <summary>
            Makes the caret invisible.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Gui.Caret.Position">
            <summary>
            Gets/Sets the position of the caret.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Gui.Caret.Line">
            <summary>
            Gets/Sets the caret line.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Gui.Caret.Column">
            <summary>
            Gets/Sets the caret column.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Gui.Caret.VisualColumn">
            <summary>
            Gets/Sets the caret visual column.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Gui.Caret.Offset">
            <summary>
            Gets/Sets the caret offset.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Gui.Caret.DesiredXPos">
            <summary>
            Gets/Sets the desired x-position of the caret, in device-independent pixels.
            </summary>
        </member>
        <member name="E:ICSharpCode.AvalonEdit.Gui.Caret.PositionChanged">
            <summary>
            Event raised when the caret position has changed.
            </summary>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.CodeCompletion.ICompletionData">
            <summary>
            Describes an entry in the <see cref="T:ICSharpCode.AvalonEdit.CodeCompletion.CompletionList"/>.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.CodeCompletion.ICompletionData.Complete(ICSharpCode.AvalonEdit.TextArea,ICSharpCode.AvalonEdit.Document.ISegment,System.EventArgs)">
            <summary>
            Perform the completion.
            </summary>
            <param name="textArea">The text area on which completion is performed.</param>
            <param name="completionSegment">The text segment that was used by the completion window if
            the user types.</param>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.CodeCompletion.ICompletionData.Image">
            <summary>
            Gets the image.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.CodeCompletion.ICompletionData.Text">
            <summary>
            Gets the text. This property is used to filter the list of visible elements.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.CodeCompletion.ICompletionData.Content">
            <summary>
            The displayed content. This can be the same as 'Text', or a WPF UIElement if
            you want to display rich content.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.CodeCompletion.ICompletionData.Description">
            <summary>
            Gets the description.
            </summary>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Gui.FoldingMargin">
            <summary>
            A margin that shows markers for foldings and allows to expand/collapse the foldings.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Gui.FoldingMargin.MeasureOverride(System.Windows.Size)">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Gui.FoldingMargin.ArrangeOverride(System.Windows.Size)">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Gui.FoldingMargin.OnTextViewChanged(ICSharpCode.AvalonEdit.Gui.TextView,ICSharpCode.AvalonEdit.Gui.TextView)">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Gui.FoldingMargin.GetVisualChild(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Gui.FoldingMargin.OnRender(System.Windows.Media.DrawingContext)">
            <inheritdoc/>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Gui.FoldingMargin.FoldingManager">
            <summary>
            Gets/Sets the folding manager from which the foldings should be shown.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Gui.FoldingMargin.VisualChildrenCount">
            <inheritdoc/>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Document.ISegmentTree">
            <summary>
            Interface to allow TextSegments to access the TextSegmentCollection - we cannot use a direct reference
            because TextSegmentCollection is generic.
            </summary>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Document.TextSegmentCollection`1">
            <summary>
            A collection of text segments that supports efficient lookup of segments
            intersecting with another segment.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.TextSegmentCollection`1.#ctor(ICSharpCode.AvalonEdit.Document.TextDocument)">
            <summary>
            Creates a new SegmentTree.
            </summary>
            <param name="textDocument">The document to which the text segments
            that will be added to the tree belong. When the document changes, the
            position of the text segments will be updated accordingly.</param>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.TextSegmentCollection`1.Add(`0)">
            <summary>
            Adds the specified segment to the tree. This will cause the segment to update when the
            document changes.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.TextSegmentCollection`1.GetNextSegment(`0)">
            <summary>
            Gets the next segment after the specified segment.
            Segments are sorted by their start offset.
            Returns null if segment is the last segment.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.TextSegmentCollection`1.GetPreviousSegment(`0)">
            <summary>
            Gets the previous segment before the specified segment.
            Segments are sorted by their start offset.
            Returns null if segment is the last segment.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.TextSegmentCollection`1.FindFirstSegmentWithStartAfter(System.Int32)">
            <summary>
            Gets the first segment with a start offset greater or equal to <paramref name="startOffset"/>.
            Returns null if no such segment is found.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.TextSegmentCollection`1.FindNode(System.Int32@)">
            <summary>
            Finds the node at the specified offset.
            After the method has run, offset is relative to the beginning of the returned node.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.TextSegmentCollection`1.FindSegmentsContaining(System.Int32)">
            <summary>
            Finds all segments that contain the given offset.
            (StartOffset &lt;= offset &lt;= EndOffset)
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.TextSegmentCollection`1.FindOverlappingSegments(ICSharpCode.AvalonEdit.Document.ISegment)">
            <summary>
            Finds all segments that overlap with the given segment.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.TextSegmentCollection`1.FindOverlappingSegments(System.Int32,System.Int32)">
            <summary>
            Finds all segments that overlap with the given segment.
            Segments are returned in the order given by GetNextSegment/GetPreviousSegment.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.TextSegmentCollection`1.Remove(`0)">
            <summary>
            Removes the specified segment from the tree. This will cause the segment to not update
            anymore when the document changes.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.TextSegmentCollection`1.Clear">
            <summary>
            Removes all segments from the tree.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.TextSegmentCollection`1.Contains(`0)">
            <summary>
            Gets whether this tree contains the specified item.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.TextSegmentCollection`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies all segments in this SegmentTree to the specified array.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.TextSegmentCollection`1.GetEnumerator">
            <summary>
            Gets an enumerator to enumerate the segments.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Document.TextSegmentCollection`1.Count">
            <summary>
            Gets the number of segments in the tree.
            </summary>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.CodeCompletion.CompletionList">
            <summary>
            The listbox used inside the CompletionWindow.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.CodeCompletion.CompletionList.RequestInsertion(System.EventArgs)">
            <summary>
            Raises the InsertionRequested event.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.CodeCompletion.CompletionList.OnApplyTemplate">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.CodeCompletion.CompletionList.OnKeyDown(System.Windows.Input.KeyEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.CodeCompletion.CompletionList.HandleKey(System.Windows.Input.KeyEventArgs)">
            <summary>
            Handles a key press. Used to let the completion list handle key presses while the
            focus is still on the text editor.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.CodeCompletion.CompletionList.SelectItemWithStart(System.String)">
            <summary>
            Selects the item that starts with the specified text.
            </summary>
        </member>
        <member name="E:ICSharpCode.AvalonEdit.CodeCompletion.CompletionList.InsertionRequested">
            <summary>
            Is raised when the completion list indicates that the user has chosen
            an entry to be completed.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.CodeCompletion.CompletionList.ListBox">
            <summary>
            Gets the list box.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.CodeCompletion.CompletionList.ScrollViewer">
            <summary>
            Gets the scroll viewer used in this list box.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.CodeCompletion.CompletionList.CompletionData">
            <summary>
            Gets/Sets the completion data.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.CodeCompletion.CompletionList.SelectedItem">
            <summary>
            Gets/Sets the selected item.
            </summary>
        </member>
        <member name="E:ICSharpCode.AvalonEdit.CodeCompletion.CompletionList.SelectionChanged">
            <summary>
            Occurs when the SelectedItem property changes.
            </summary>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.CodeCompletion.CompletionListBox">
            <summary>
            The list box used inside the CompletionList.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.CodeCompletion.CompletionListBox.OnApplyTemplate">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.CodeCompletion.CompletionListBox.ClearSelection">
            <summary>
            Removes the selection.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.CodeCompletion.CompletionListBox.SelectIndex(System.Int32)">
            <summary>
            Selects the item with the specified index and scrolls it into view.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.CodeCompletion.CompletionListBox.CenterViewOn(System.Int32)">
            <summary>
            Centers the view on the item with the specified index.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.CodeCompletion.CompletionListBox.FirstVisibleItem">
            <summary>
            Gets the number of the first visible item.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.CodeCompletion.CompletionListBox.VisibleItemCount">
            <summary>
            Gets the number of visible items.
            </summary>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Highlighting.Xshd.XshdKeywords">
            <summary>
            A list of keywords.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Highlighting.Xshd.XshdKeywords.AcceptVisitor(ICSharpCode.AvalonEdit.Highlighting.Xshd.IXshdVisitor)">
            <inheritdoc/>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Highlighting.Xshd.XshdKeywords.ColorReference">
            <summary>
            The color.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Highlighting.Xshd.XshdKeywords.Words">
            <summary>
            Gets the list of key words.
            </summary>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Highlighting.Xshd.V2Loader">
            <summary>
            Loads .xshd files, version 2.0.
            Version 2.0 files are recognized by the namespace.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Highlighting.Xshd.V2Loader.SetPosition(ICSharpCode.AvalonEdit.Highlighting.Xshd.XshdElement,System.Xml.XmlReader)">
            <summary>
            Sets the element's position to the XmlReader's position.
            </summary>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Highlighting.HighlightedSection">
            <summary>
            A text section with syntax highlighting information.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Highlighting.HighlightedSection.Offset">
            <summary>
            Gets/sets the document offset of the section.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Highlighting.HighlightedSection.Length">
            <summary>
            Gets/sets the length of the section.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Highlighting.HighlightedSection.Color">
            <summary>
            Gets the highlighting color associated with the highlighted section.
            </summary>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Gui.VisualLineTextSource">
            <summary>
            WPF TextSource implementation that creates TextRuns for a VisualLine.
            </summary>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Gui.ITextRunConstructionContext">
            <summary>
            Contains information relevant for text run creation.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Gui.ITextRunConstructionContext.Document">
            <summary>
            Gets the text document.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Gui.ITextRunConstructionContext.TextView">
            <summary>
            Gets the text view for which the construction runs.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Gui.ITextRunConstructionContext.VisualLine">
            <summary>
            Gets the visual line that is currently being constructed.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Gui.ITextRunConstructionContext.GlobalTextRunProperties">
            <summary>
            Gets the global text run properties.
            </summary>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Gui.VisualLinesInvalidException">
            <summary>
            A VisualLinesInvalidException indicates that you accessed the <see cref="P:ICSharpCode.AvalonEdit.Gui.TextView.VisualLines"/> property
            of the <see cref="T:ICSharpCode.AvalonEdit.Gui.TextView"/> while the visual lines were invalid.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Gui.VisualLinesInvalidException.#ctor">
            <summary>
            Creates a new VisualLinesInvalidException instance.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Gui.VisualLinesInvalidException.#ctor(System.String)">
            <summary>
            Creates a new VisualLinesInvalidException instance.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Gui.VisualLinesInvalidException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new VisualLinesInvalidException instance.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Gui.VisualLinesInvalidException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates a new VisualLinesInvalidException instance.
            </summary>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Document.TextSourceView">
            <summary>
            Implements the ITextSource interface by wrapping another TextSource
            and viewing only a part of the text.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.TextSourceView.#ctor(ICSharpCode.AvalonEdit.Document.ITextSource,ICSharpCode.AvalonEdit.Document.ISegment)">
            <summary>
            Creates a new TextSourceView object.
            </summary>
            <param name="baseTextSource">The base text source.</param>
            <param name="viewedSegment">A text segment from the base text source</param>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.TextSourceView.GetCharAt(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.TextSourceView.GetText(System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="E:ICSharpCode.AvalonEdit.Document.TextSourceView.TextChanged">
            <inheritdoc/>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Document.TextSourceView.Text">
            <inheritdoc/>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Document.TextSourceView.TextLength">
            <inheritdoc/>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Document.StringTextSource">
            <summary>
            Implements the ITextSource interface using a string.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.StringTextSource.#ctor(System.String)">
            <summary>
            Creates a new StringTextSource.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.StringTextSource.GetCharAt(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.StringTextSource.GetText(System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Document.StringTextSource.Text">
            <inheritdoc/>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Document.StringTextSource.TextLength">
            <inheritdoc/>
        </member>
        <member name="T:XamlGeneratedNamespace.GeneratedInternalTypeHelper">
            <summary>
            GeneratedInternalTypeHelper
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.CreateInstance(System.Type,System.Globalization.CultureInfo)">
            <summary>
            CreateInstance
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.GetPropertyValue(System.Reflection.PropertyInfo,System.Object,System.Globalization.CultureInfo)">
            <summary>
            GetPropertyValue
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.SetPropertyValue(System.Reflection.PropertyInfo,System.Object,System.Object,System.Globalization.CultureInfo)">
            <summary>
            SetPropertyValue
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.CreateDelegate(System.Type,System.Object,System.String)">
            <summary>
            CreateDelegate
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.AddEventHandler(System.Reflection.EventInfo,System.Object,System.Delegate)">
            <summary>
            AddEventHandler
            </summary>
        </member>
    </members>
</doc>
