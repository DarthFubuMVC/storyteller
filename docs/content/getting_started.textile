h2. Getting Started

This guide covers getting up and running a simple StoryTeller project. After reading it, you should be familiar with:

* What StoryTeller is, why I might (or might not) use it, and how I get started
* Downloading and installing StoryTeller and creating a new StoryTeller project
* Creating simple Fixtures and Grammars
* Adding a new Workspace
* Authoring your first test
* Executing a test and analyzing the output

NOTE. All the code used in this guide is available under in the "StoryTeller repository on GitHub":http://github.com/storyteller/storyteller/tree/master/source/Examples/

endprologue.

h3. This guide assumes...

* You want to write executable specifications for your project
* That you're comfortable setting up basic Visual Studio class library projects

h3. Introduction to StoryTeller

h4. What is StoryTeller?

StoryTeller is a tool for creating external domain specific languages to specify and test the desired behavior of your software system.  StoryTeller consists of:

# A framework for crafting testing DSL's with any .Net language
# A WPF client for interactively editing and running tests/specifications
# A command line runner for integration with build tools and your continuous integration infrastructure

NOTE. At this point StoryTeller is *very* developer centric and basically forces a team to author the fixtures and grammars 
in code before non-developers can use StoryTeller to create specifications.  This is a side effect of being developed and 
used initially by a team that really didn't have any non-developers.  A future release *will* include support for true 
["Acceptance Test Driven Development":http://www.methodsandtools.com/archive/archive.php?id=72] by allowing non-developers to create "stand in" fixtures and grammars
before any code is written by developers or test engineers.

h4. Motivation

The goal of StoryTeller was to realize the conceptual potential of the older "FitNesse":http://fitnesse.org/ tool with far better mechanics.  Specifically, StoryTeller is meant to
improve upon FitNesse by:

# Being easier to integrate in both Continuous Integration scenarios and source control
# Easier construction of Fixtures and Grammars
# Better state management within the tests
# A far better editing experience that cuts down dramatically on the mistakes that are so easy to make with FitNesse
# More expressive tests

h4. What do I need to know before I get started?

StoryTeller is open source under the Apache 2.0 license.  There is no commercial support at this junction and the hope is that it can succeed as a purely community driven effort.


NOTE. StoryTeller is written and compiled with .Net 4.0.  If there is enough demand, we will back port StoryTeller to .Net 3.5.

h3. Setting up your first project

h4. Where do I get StoryTeller from?

The fastest way to get started is by downloading the binaries from the "StoryTeller downloads page on GitHub":http://github.com/storyteller/storyteller/downloads.  If you're feeling brave or need a recent fix, the latest builds are 
available on the ["StoryTeller page on TeamCity.CodeBetter.com":http://teamcity.codebetter.com/project.html?projectId=project5].

NOTE. You can also build StoryTeller from source, but that's a little more complicated and involves more setup time. If you're already a git-using, rake-aware developer, you can read our (todo) getting started guide for advanced developers.

Extract the StoryTeller ZIP into your lib/tools folder.

NOTE. StoryTeller is a pure "xcopy" deployment.  No further installation is necessary.

h3. Starting a new project

h4. Adding a Visual Studio.Net project for StoryTeller to your solution

The recommended first step is to create a new project in your Visual Studio solutions that looks like the _["Examples":http://github.com/storyteller/storyteller/tree/master/source/Examples/]_ project in this tree:

!images/project/ProjectStructure.png!

NOTE. You don't have to create a separate project / assembly in Visual Studio.Net for the StoryTeller support, but my team (Dovetail Software) has found it valuable

In your Visual Studio.Net project you'll want to have two folders:

# The _Tests_ (or _Specifications_) folder to store the test files
# The _Fixtures_ folder as the top level namespace for the custom StoryTeller ["Fixture's":fixtures.html] you'll write later.  

Your StoryTeller project absolutely must have a reference to the StoryTeller.dll assembly

!images/project/References.png!

h4. Configuring your new project inside StoryTeller 

Now that you have a Visual Studio project for StoryTeller, you next need to create a StoryTeller project file that defines where the tests/specs are and how they'll be executed.  Open up the folder where you extracted StoryTeller and run the StoryTellerUI.exe application.

!images/project/FindStoryTellerUI.png!

When you open the StoryTellerUI client for the first time it should immediately prompt you to configure a new StoryTeller project:

<image src="images/project/NewProject.png" style="overflow:scroll"></image>

h5. Mandatory Project Fields

For the moment, let's only worry about the most important data elements that you need to enter in this screen.

- Name := A short, descriptive project name.  This will be displayed in the UI and in the project history tabs.

- File Name := The file location to save this project file.  StoryTeller will save the project as an Xml file (it's just a serialized "Project":http://github.com/storyteller/storyteller/blob/master/source/StoryTeller/Workspace/Project.cs object)  The recommendation is to either put this in the root directory of your solution or in the root of the Visual Studio project.

- Test Folder := The root folder on the file system where the test files.  The folder path can either be an absolute path (not recommended) or a relative path *to the project file*

- Binary Folder := The folder where StoryTeller can find the binary assemblies for the system under test.  This should *almost always* be the bin\debug folder of your StoryTeller VS.Net project where the build products go

INFO. StoryTeller executes tests/specs in a separate AppDomain rooted in the project's binary folder.  The testing AppDomain uses shadow copying, so it is possible to recompile your .Net solution without closing the StoryTeller UI.  The StoryTeller UI uses a file system watcher and will recreate the separate AppDomain anytime a change is detected to the main fixture assembly.

- System Type Name := The value of this field should be the assembly qualified name of a class that 
implements the "ISystem interface":http://github.com/storyteller/storyteller/blob/master/source/StoryTeller/Engine/ISystem.cs 
that StoryTeller uses internally to activate and bootstrap the system under test.  If no type name is supplied, the Fixture Assembly
field becomes mandatory and StoryTeller will use a default _nullo_ version of the ISystem interface for this project.  See "Creating a Custom ISystem":creating_a_system.html.

- Fixture Assembly := If you do not specify a custom System Type Name class, then you must specify the name of the assembly 
that contains the custom Fixture classes so that StoryTeller can build up its internal graph of Fixtures and Grammars

Using basic defaults, you would fill out the form to look something like this for the Visual Studio.Net project shown previously:

!images/project/BasicValues.png!

h5. Other Project Fields

You can further control the behavior of your project by providing values for these additional fields:

- Configuration File Name := If you need to supply configuration in an App.config file, you need to 
specify a file name in this field *in the binary folder* that StoryTeller should use as the configuration
file when constructing the AppDomain for executing tests/specs.

- Timeout in Seconds := Just as it appears, this setting controls the "timeout" time of test execution.  

h3. Writing your first Fixture and Grammar

For a simple example, let's say that you're writing specifications for a new calculator service.  At a minimum, 
you want to test that a client of the calculator can enter one number, add or multiply that by another number, 
and lastly assert that the resulting number matches our expectations.

h4. Add a new Fixture

Start your first Fixture for the calculator by adding a new class to the VS project:

CODE[CalculatorFixture1].

INFO. Technically, a Fixture class only needs to implement the "IFixture":http://github.com/storyteller/storyteller/blob/master/source/StoryTeller/IFixture.cs interface, but it's easiest to simply inherit from "Fixture":http://github.com/storyteller/storyteller/blob/master/source/StoryTeller/Engine/Fixture.cs.

h4. Add stubbed Grammars

Let's assume that the calculator service in question hasn't been created yet, but you still want to create an automated specification ahead of time (the way you're supposed to do, but few of us pull off).  
In that case you just want to create the shell of the grammars.  For now, let's assume a flow-based style of testing and write out the steps as "Sentences": like this:

CODE[CalculatorFixture2].

h3. Write your first test

After you've written at least a stub of the CalculatorFixture class and compiled the code, open the StoryTellerUI 
to the new project and add a new "Workspace":workspaces.html to the project by right-clicking on the project node in the Test Explorer:

!images/project/AddWorkspace.png!

and specify the new Workspace name

!images/project/AddWorkspace2.png!

From the new Workspace tree node, add a new test directly underneath the new "Calculator" Workspace called "Add Numbers."

!images/project/AddTest.png!

This should open your new test into the main pane of the StoryTeller UI.

!images/project/NewTest.png!

Select the "Edit" mode, and create a couple test cases using our new Fixture (Calculator2Fixture above).

!images/project/Editor.png!

And run the new Test/Spec by clicking _Run_.

INFO. StoryTeller is meant to be wrist friendly by exposing keyboard shortcuts for most common actions

The output will look like this:

!images/project/InitialFailure.png!

The test execution failed of course because nothing is really implemented.

h3. Connect the fixtures and grammars to the system under test

Alrighty, we've got a shell of a fixture and a specification that's failing.  Let's make the connection 
between the specification and the new Calculator service by fleshing out the Calculator fixture:

CODE[CalculatorFixture3].

And after compiling, execute your original specification (I've quietly switched it to using the fully coded Calculator3Fixture):

!images/project/Fixed.png!

Just for fun, let's put some invalid numbers into the test just to see what a failure looks like:

!images/project/BadData.png!


